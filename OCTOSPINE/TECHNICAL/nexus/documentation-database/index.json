{
  "tools": {
    "tools\\autonomous-system-manager.py": {
      "name": "autonomous-system-manager.py",
      "type": "python_tool",
      "description": "\nAutonomous System Manager\nA self-healing, adaptive system that can diagnose, assess, and overcome environment issues.\n",
      "functions": [
        "main",
        "__init__",
        "setup_logging",
        "_get_system_info",
        "_load_requirements",
        "diagnose_system",
        "_check_python_packages",
        "_check_node_environment",
        "_check_system_tools",
        "_check_development_tools",
        "_check_file_system",
        "_check_network",
        "auto_install_missing_components",
        "_install_python_package",
        "_install_nodejs",
        "_install_vscode",
        "self_heal_and_adapt",
        "_generate_adaptation_plan",
        "_execute_adaptation_plan"
      ],
      "dependencies": [
        "os",
        "sys",
        "subprocess",
        "platform",
        "json",
        "urllib.request",
        "zipfile",
        "shutil",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "logging"
      ]
    },
    "tools\\backlog_synthesis.py": {
      "name": "backlog_synthesis.py",
      "type": "python_tool",
      "description": "Utility tool",
      "functions": [],
      "dependencies": [
        "json",
        "pathlib.Path",
        "datetime.datetime"
      ]
    },
    "tools\\comprehensive-repo-audit.py": {
      "name": "comprehensive-repo-audit.py",
      "type": "python_tool",
      "description": "\nComprehensive Repository Audit Script\nA/B Testing Methodology: Manual vs Automated Analysis\n",
      "functions": [
        "main",
        "__init__",
        "run_audit",
        "manual_analysis",
        "automated_analysis",
        "discover_all_files",
        "identify_systems_manual",
        "identify_processes_manual",
        "analyze_documentation_manual",
        "compare_a_b_results",
        "generate_final_report",
        "assess_repository_health",
        "assess_documentation_status",
        "assess_indexing_status",
        "generate_recommendations",
        "generate_next_actions"
      ],
      "dependencies": [
        "os",
        "json",
        "re",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Any",
        "datetime.datetime",
        "hashlib",
        "sys"
      ]
    },
    "tools\\context_retention.py": {
      "name": "context_retention.py",
      "type": "python_tool",
      "description": "Utility tool",
      "functions": [
        "human"
      ],
      "dependencies": [
        "json",
        "os",
        "pathlib.Path",
        "datetime.datetime"
      ]
    },
    "tools\\fix_framework_issue.py": {
      "name": "fix_framework_issue.py",
      "type": "python_tool",
      "description": "Fix any frame_type references in the autonomous framework",
      "functions": [
        "fix_framework_file",
        "check_file_encoding",
        "check_syntax"
      ],
      "dependencies": [
        "re"
      ]
    },
    "tools\\generate_forensic_summary.py": {
      "name": "generate_forensic_summary.py",
      "type": "python_tool",
      "description": "\nGenerate a consolidated forensic summary from the latest forensic reports.\nOutputs:\n- reports/forensic_consolidated_summary.json\n- reports/forensic_consolidated_summary.html\n",
      "functions": [
        "load_json",
        "find_latest_report_by_prefix",
        "ensure_reports_dir",
        "summarize",
        "write_json",
        "write_html",
        "main",
        "bar"
      ],
      "dependencies": [
        "__future__.annotations",
        "json",
        "os",
        "dataclasses.dataclass",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple"
      ]
    },
    "tools\\generate_import_graph_svg.py": {
      "name": "generate_import_graph_svg.py",
      "type": "python_tool",
      "description": "\nRender the latest import_dependency_graph_*.json as a simple SVG.\nOutput: reports/import_dependency_graph.svg\n\nThis is a lightweight visual: nodes are files, edges are imports.\n",
      "functions": [
        "find_latest_graph",
        "load_graph",
        "layout",
        "to_svg",
        "main"
      ],
      "dependencies": [
        "__future__.annotations",
        "json",
        "pathlib.Path",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Tuple"
      ]
    },
    "tools\\index_folder.py": {
      "name": "index_folder.py",
      "type": "python_tool",
      "description": "Utility tool",
      "functions": [
        "index_dir",
        "main"
      ],
      "dependencies": [
        "json",
        "pathlib.Path",
        "sys"
      ]
    },
    "tools\\quarantine_bad_json.py": {
      "name": "quarantine_bad_json.py",
      "type": "python_tool",
      "description": "\nQuarantine invalid JSON report files to backlog/invalid to satisfy rigid CI.\nMoves any JSON in reports/ that fails to parse.\n",
      "functions": [
        "main"
      ],
      "dependencies": [
        "__future__.annotations",
        "json",
        "pathlib.Path",
        "typing.List"
      ]
    },
    "tools\\run_filetree_apply.py": {
      "name": "run_filetree_apply.py",
      "type": "python_tool",
      "description": "Utility tool",
      "functions": [],
      "dependencies": [
        "importlib.util",
        "pathlib.Path",
        "json"
      ]
    },
    "tools\\safe_mover.py": {
      "name": "safe_mover.py",
      "type": "python_tool",
      "description": "Utility tool",
      "functions": [],
      "dependencies": [
        "shutil",
        "pathlib.Path"
      ]
    },
    "tools\\scan_secrets_strict.py": {
      "name": "scan_secrets_strict.py",
      "type": "python_tool",
      "description": "\nHigh-confidence secret scan (rigid CI gate).\nBlocks on confident matches; skips low-confidence noise.\nScans tracked files excluding node_modules and large binaries.\n",
      "functions": [
        "is_textual",
        "iter_files",
        "scan",
        "main"
      ],
      "dependencies": [
        "__future__.annotations",
        "base64",
        "re",
        "sys",
        "pathlib.Path",
        "typing.Iterable",
        "typing.List",
        "typing.Tuple"
      ]
    },
    "tools\\security_remediation.py": {
      "name": "security_remediation.py",
      "type": "python_tool",
      "description": "\nSecurity Remediation Script\nAddresses the 86 vulnerabilities reported by GitHub Dependabot\n",
      "functions": [
        "main",
        "__init__",
        "run_python_security_audit",
        "run_npm_security_audit",
        "update_python_dependencies",
        "update_npm_dependencies",
        "generate_security_report",
        "_generate_recommendations",
        "run_comprehensive_remediation"
      ],
      "dependencies": [
        "json",
        "subprocess",
        "sys",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "logging"
      ]
    },
    "tools\\simple-autonomous-test.py": {
      "name": "simple-autonomous-test.py",
      "type": "python_tool",
      "description": "\nSimple Autonomous System Test\nDemonstrates the autonomous capabilities you described.\n",
      "functions": [
        "diagnose_environment",
        "auto_install_missing_tools",
        "adapt_workflow",
        "generate_recommendations",
        "main"
      ],
      "dependencies": [
        "os",
        "sys",
        "subprocess",
        "platform",
        "json",
        "pathlib.Path"
      ]
    },
    "tools\\test-all-in.py": {
      "name": "test-all-in.py",
      "type": "python_tool",
      "description": "\nTest script for All-In Analysis\n",
      "functions": [
        "main"
      ],
      "dependencies": [
        "sys",
        "os",
        "scripts.all_in_analysis.run_all_in_analysis"
      ]
    },
    "tools\\test-framework-failure-handling.py": {
      "name": "test-framework-failure-handling.py",
      "type": "python_tool",
      "description": "\nTest Framework Failure Handling\nDemonstrates how the framework properly handles failures instead of just continuing\n",
      "functions": [
        "test_failure_handling"
      ],
      "dependencies": [
        "sys",
        "json",
        "pathlib.Path",
        "importlib.util"
      ]
    },
    "tools\\test-framework-simple.py": {
      "name": "test-framework-simple.py",
      "type": "python_tool",
      "description": "\nSimple test script for autonomous framework\n",
      "functions": [],
      "dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "autonomous_framework_v2.AutonomousFramework",
        "traceback"
      ]
    },
    "tools\\test-js-bridge.py": {
      "name": "test-js-bridge.py",
      "type": "python_tool",
      "description": "\nTest script to verify JavaScript bridge functionality\n",
      "functions": [
        "test_js_bridge"
      ],
      "dependencies": [
        "json",
        "tempfile",
        "subprocess",
        "os",
        "pathlib",
        "urllib.parse"
      ]
    },
    "tools\\test-synthesis-simple.py": {
      "name": "test-synthesis-simple.py",
      "type": "python_tool",
      "description": "\nSimple test to isolate synthesis analysis issue\n",
      "functions": [
        "test_synthesis"
      ],
      "dependencies": [
        "sys",
        "importlib.util",
        "traceback"
      ]
    },
    "tools\\test_minimal_framework.py": {
      "name": "test_minimal_framework.py",
      "type": "python_tool",
      "description": "Test importing the autonomous framework",
      "functions": [
        "test_import",
        "test_frame_registry"
      ],
      "dependencies": [
        "sys",
        "os",
        "autonomous_framework_v2",
        "autonomous_framework_v2.FrameRegistry",
        "autonomous_framework_v2.Frame",
        "autonomous_framework_v2.FrameType",
        "traceback",
        "traceback"
      ]
    },
    "tools\\validate_json_reports.py": {
      "name": "validate_json_reports.py",
      "type": "python_tool",
      "description": "\nValidate JSON outputs produced by the framework.\nRigid CI gate: exits non-zero if any JSON file fails to parse.\nTargets:\n- reports/*.json\n- internal/repo.manifest.json\n- internal/indexes/*.index.json\n",
      "functions": [
        "collect_targets",
        "main"
      ],
      "dependencies": [
        "__future__.annotations",
        "json",
        "sys",
        "pathlib.Path",
        "typing.List"
      ]
    },
    "tools\\extraction\\persona-extraction\\consciousness-persona-extractor.py": {
      "name": "consciousness-persona-extractor.py",
      "type": "python_tool",
      "description": "\nConsciousness Persona Extractor\n==============================\n\nA comprehensive tool for extracting emotional, cultural, and persona-related content\nfrom consciousness system files. Identifies feelings, sentiments, rituals, SOPs,\nnaming events, titles, acknowledgments, play, and lore.\n",
      "functions": [
        "main",
        "__init__",
        "extract_from_file",
        "_extract_from_small_file",
        "_extract_from_large_file",
        "_get_overlap",
        "_extract_from_content",
        "_deduplicate_matches",
        "analyze_persona_insights",
        "_analyze_emotional_profile",
        "_analyze_cultural_identity",
        "_analyze_training_patterns",
        "_get_file_content",
        "_analyze_ritual_patterns",
        "_analyze_naming_conventions",
        "_analyze_acknowledgment_style",
        "_analyze_play_characteristics",
        "_analyze_lore_elements",
        "_generate_persona_recommendations"
      ],
      "dependencies": [
        "json",
        "re",
        "os",
        "pathlib.Path",
        "datetime.datetime",
        "collections.defaultdict",
        "collections.Counter",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple",
        "typing.Any",
        "logging",
        "argparse"
      ]
    },
    "tools\\utilities\\cleanup\\file-tree-cleanup.py": {
      "name": "file-tree-cleanup.py",
      "type": "python_tool",
      "description": "\nFile Tree Cleanup and Restructuring Script\n==========================================\n\nComprehensive script to clean up, restructure, and standardize the AZ Interface file tree.\nThis script will:\n1. Analyze all files for required backhooks and syntax\n2. Capture valuable content from Imports folder\n3. Delete redundant files after content capture\n4. Create archive folder for files to be removed\n5. Implement consistent naming standards\n6. Ensure case standards consistency\n7. Merge and sort files as required\n8. Restructure file tree for better organization\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-05\n",
      "functions": [
        "main",
        "__init__",
        "analyze_file",
        "get_file_category",
        "check_naming_standards",
        "check_syntax",
        "check_backhooks",
        "generate_content_summary",
        "determine_actions",
        "is_duplicate_content",
        "is_outdated",
        "is_temporary",
        "scan_directory",
        "create_archive_structure",
        "capture_imports_content",
        "is_valuable_content",
        "generate_cleanup_report",
        "generate_recommendations",
        "run_cleanup",
        "generate_markdown_summary"
      ],
      "dependencies": [
        "os",
        "shutil",
        "json",
        "re",
        "pathlib.Path",
        "datetime.datetime",
        "collections.defaultdict",
        "logging"
      ]
    },
    "tools\\utilities\\cleanup\\file_tree_cleanup.py": {
      "name": "file_tree_cleanup.py",
      "type": "python_tool",
      "description": "\nFile Tree Cleanup and Restructuring Script\n==========================================\n\nComprehensive script to clean up, restructure, and standardize the AZ Interface file tree.\nThis script will:\n1. Analyze all files for required backhooks and syntax\n2. Capture valuable content from Imports folder\n3. Delete redundant files after content capture\n4. Create archive folder for files to be removed\n5. Implement consistent naming standards\n6. Ensure case standards consistency\n7. Merge and sort files as required\n8. Restructure file tree for better organization\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-05\n",
      "functions": [
        "main",
        "__init__",
        "analyze_file",
        "get_file_category",
        "check_naming_standards",
        "check_syntax",
        "check_backhooks",
        "generate_content_summary",
        "determine_actions",
        "is_duplicate_content",
        "is_outdated",
        "is_temporary",
        "scan_directory",
        "create_archive_structure",
        "capture_imports_content",
        "is_valuable_content",
        "generate_cleanup_report",
        "generate_recommendations",
        "run_cleanup",
        "generate_markdown_summary"
      ],
      "dependencies": [
        "os",
        "shutil",
        "json",
        "re",
        "pathlib.Path",
        "datetime.datetime",
        "collections.defaultdict",
        "logging"
      ]
    },
    "tools\\utilities\\interface\\vibe-coder-interface.py": {
      "name": "vibe-coder-interface.py",
      "type": "python_tool",
      "description": "\nVibe Coder Interface - Consciousness-Aware Development Experience\n\nProvides a flow state optimized interface for vibe coders, supporting\nconsciousness evolution and seamless development workflows.\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-06\n",
      "functions": [
        "main",
        "__init__",
        "load_vibe_config",
        "save_vibe_config",
        "enter_flow_state",
        "show_consciousness_reminder",
        "track_achievement",
        "suggest_flow_optimization",
        "get_pattern_suggestions",
        "create_flow_report",
        "start_flow_session",
        "end_flow_session",
        "__init__",
        "record_flow_state",
        "record_state_transition",
        "record_focus_session"
      ],
      "dependencies": [
        "os",
        "json",
        "time",
        "logging",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "threading"
      ]
    },
    "tools\\utilities\\maintenance\\comprehensive-ts-fix.py": {
      "name": "comprehensive-ts-fix.py",
      "type": "python_tool",
      "description": "\nComprehensive TypeScript Error Fixer\nFixes common TypeScript errors systematically across the AZ Interface codebase.\n",
      "functions": [
        "main",
        "__init__",
        "fix_typescript_errors",
        "fix_tsconfig",
        "fix_service_files",
        "fix_service_file",
        "fix_missing_variables",
        "fix_type_mismatches",
        "fix_missing_properties",
        "fix_object_literals",
        "fix_type_definitions",
        "fix_type_file",
        "fix_arktype_schemas",
        "fix_utility_files",
        "fix_utility_file",
        "fix_env_validation",
        "generate_report"
      ],
      "dependencies": [
        "os",
        "re",
        "json",
        "logging",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Any",
        "datetime.datetime",
        "traceback"
      ]
    },
    "tools\\utilities\\maintenance\\critical-typescript-fixes.py": {
      "name": "critical-typescript-fixes.py",
      "type": "python_tool",
      "description": "\nCritical TypeScript Error Fixer - Focused Fix for Build-Breaking Issues\n\nThis script targets the most critical TypeScript errors that prevent building\nand running the application.\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-05\n",
      "functions": [
        "fix_technomancer_service",
        "fix_xp_service",
        "fix_traffic_strategy_service",
        "fix_env_validation",
        "fix_xp_types",
        "main"
      ],
      "dependencies": [
        "re",
        "os",
        "pathlib.Path"
      ]
    },
    "tools\\utilities\\maintenance\\enhanced-smart-delegator.py": {
      "name": "enhanced-smart-delegator.py",
      "type": "python_tool",
      "description": "\nEnhanced Smart Delegator with Agentic Oversight\n- Manual file runs for diagnostics\n- Fault classification (code vs dependency vs configuration)\n- Backlog system for dependency-related issues\n- VibeCoder-friendly explanations\n- Recursive fault analysis\n- Research integration with Playwright\n",
      "functions": [
        "main",
        "__init__",
        "run_manual_file_analysis",
        "_find_typescript_files",
        "_analyze_file",
        "_classify_line_fault",
        "_extract_dependencies",
        "_generate_vibe_coder_explanation",
        "_run_typescript_check",
        "_parse_typescript_error",
        "_create_backlog_item",
        "_generate_analysis_summary",
        "_generate_recommendations",
        "generate_comprehensive_report"
      ],
      "dependencies": [
        "os",
        "json",
        "subprocess",
        "re",
        "time",
        "datetime.datetime",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "enum.Enum",
        "typing.List",
        "typing.Dict",
        "typing.Optional",
        "typing.Any",
        "logging"
      ]
    },
    "tools\\utilities\\maintenance\\environment-fixer.py": {
      "name": "environment-fixer.py",
      "type": "python_tool",
      "description": "\nEnvironment Fixer - Comprehensive Development Environment Setup\n\nFixes common environment issues including npm PATH, encoding, dependencies,\nand ensures proper setup for the Tech Stack Silo.\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-06\n",
      "functions": [
        "main",
        "__init__",
        "detect_environment_issues",
        "check_npm_path",
        "check_python_dependencies",
        "check_node_dependencies",
        "check_encoding_issues",
        "check_file_permissions",
        "check_git_config",
        "get_system_info",
        "fix_npm_path",
        "install_python_dependencies",
        "install_node_dependencies",
        "fix_encoding_issues",
        "fix_file_permissions",
        "configure_git",
        "apply_all_fixes",
        "generate_fix_report"
      ],
      "dependencies": [
        "os",
        "sys",
        "json",
        "subprocess",
        "logging",
        "platform",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime"
      ]
    },
    "tools\\utilities\\maintenance\\essential-frames-automation.py": {
      "name": "essential-frames-automation.py",
      "type": "python_tool",
      "description": "\nEnhanced Essential Frames Automation System\nMulti-language support with automatic triggers for critical validation steps\n",
      "functions": [
        "run_essential_frames_automation",
        "__init__",
        "detect_languages_in_project",
        "_load_config",
        "_save_config",
        "trigger_syntax_validation",
        "trigger_dependency_health",
        "trigger_pattern_recognition",
        "trigger_continuance_guard",
        "_run_pre_compilation_checks",
        "_detect_file_language",
        "_validate_language_syntax",
        "_validate_typescript",
        "_validate_python",
        "_validate_javascript",
        "_validate_powershell",
        "_validate_docker",
        "_validate_yaml",
        "_validate_json",
        "_get_common_bad_patterns",
        "_check_dependencies",
        "_analyze_error_impact",
        "_validate_fix_safety",
        "_predict_fix_impact",
        "_trigger_webhooks",
        "get_frame_status",
        "enable_frame"
      ],
      "dependencies": [
        "json",
        "os",
        "sys",
        "subprocess",
        "time",
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "traceback",
        "hashlib",
        "enum.Enum",
        "yaml"
      ]
    },
    "tools\\utilities\\maintenance\\implementation-engine.py": {
      "name": "implementation-engine.py",
      "type": "python_tool",
      "description": "\nAZ Interface Implementation Engine\n- Actually installs missing dependencies\n- Configures security and credentials\n- Sets up infrastructure and shared folders\n- Implements cloud integration\n- Creates local processing capabilities\n- Manages API keys and Docker containers\n- Follows security best practices\n",
      "functions": [
        "main",
        "__init__",
        "_detect_system",
        "_get_memory_info",
        "_get_disk_space",
        "_get_network_info",
        "_detect_existing_services",
        "__init__",
        "_load_or_generate_key",
        "encrypt",
        "decrypt",
        "store_credentials",
        "load_credentials",
        "__init__",
        "install_nodejs",
        "_install_nodejs_windows",
        "_install_nodejs_linux",
        "_install_nodejs_macos",
        "install_git",
        "install_docker",
        "_download_and_install_windows",
        "__init__",
        "create_directory_structure",
        "setup_shared_folders",
        "_setup_windows_shares",
        "_setup_linux_shares",
        "setup_local_processing",
        "__init__",
        "setup_onedrive",
        "setup_google_drive",
        "__init__",
        "run_full_installation",
        "_log_step",
        "_install_dependencies",
        "_setup_infrastructure",
        "_configure_security",
        "_setup_cloud_integration",
        "_create_documentation"
      ],
      "dependencies": [
        "os",
        "sys",
        "json",
        "subprocess",
        "platform",
        "shutil",
        "hashlib",
        "base64",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "logging",
        "datetime.datetime",
        "requests",
        "zipfile",
        "tarfile",
        "cryptography.fernet.Fernet",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.kdf.pbkdf2.PBKDF2HMAC",
        "cryptography.fernet.Fernet",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.kdf.pbkdf2.PBKDF2HMAC",
        "urllib.request",
        "psutil",
        "psutil",
        "psutil"
      ]
    },
    "tools\\utilities\\maintenance\\implement_restructuring.py": {
      "name": "implement_restructuring.py",
      "type": "python_tool",
      "description": "\nFile Tree Restructuring Implementation Script\n============================================\n\nImplements the comprehensive file tree restructuring plan for AZ Interface.\nThis script will:\n1. Create new directory structure\n2. Move files to appropriate locations\n3. Update file references where possible\n4. Generate migration report\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-05\n",
      "functions": [
        "main",
        "__init__",
        "create_directory_structure",
        "move_consciousness_files",
        "move_tools_files",
        "move_documentation_files",
        "_execute_moves",
        "create_navigation_files",
        "_create_consciousness_navigation",
        "_create_tools_navigation",
        "_create_docs_navigation",
        "generate_migration_report",
        "_generate_markdown_summary",
        "run_restructuring"
      ],
      "dependencies": [
        "os",
        "shutil",
        "json",
        "pathlib.Path",
        "datetime.datetime",
        "logging"
      ]
    },
    "tools\\utilities\\maintenance\\intelligent-diagnostic-repair.py": {
      "name": "intelligent-diagnostic-repair.py",
      "type": "python_tool",
      "description": "\nIntelligent Diagnostic and Repair Tool\nComprehensive TypeScript error resolution with pattern recognition and learning integration.\n\nThis tool integrates all learnings from known-faults-fixes.md to provide intelligent,\nsystematic error resolution without creating whack-a-mole effects.\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-07\n",
      "functions": [
        "main",
        "__init__",
        "load_error_patterns",
        "load_known_faults",
        "run_comprehensive_diagnosis",
        "analyze_typescript_errors",
        "analyze_project_structure",
        "analyze_dependencies",
        "analyze_configuration",
        "generate_recommendations",
        "apply_intelligent_fixes",
        "apply_pattern_fix",
        "fix_missing_variables",
        "fix_type_mismatches",
        "fix_syntax_errors",
        "fix_object_literals",
        "update_typescript_config",
        "generate_report"
      ],
      "dependencies": [
        "os",
        "re",
        "json",
        "logging",
        "subprocess",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "dataclasses.dataclass",
        "traceback"
      ]
    },
    "tools\\utilities\\maintenance\\multi-language-delegator.py": {
      "name": "multi-language-delegator.py",
      "type": "python_tool",
      "description": "\nMulti-Language Intelligent Tooling Delegator\n\nThis system provides comprehensive analysis and fixing capabilities across all\nlanguages, services, and products in the AZ Interface ecosystem.\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-05\nBased on: Tech Stack Silo Architecture\n",
      "functions": [
        "__init__",
        "detect_languages",
        "__init__",
        "detect_services",
        "__init__",
        "detect_products",
        "__init__",
        "__init__",
        "load_tech_database",
        "generate_comprehensive_report"
      ],
      "dependencies": [
        "os",
        "re",
        "json",
        "subprocess",
        "logging",
        "asyncio",
        "aiohttp",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "datetime.timedelta",
        "yaml",
        "toml",
        "xml.etree.ElementTree",
        "dataclasses.dataclass",
        "enum.Enum",
        "shutil",
        "traceback"
      ]
    },
    "tools\\utilities\\maintenance\\quick-build-fix.py": {
      "name": "quick-build-fix.py",
      "type": "python_tool",
      "description": "\nQuick Build Fix - Get UI Running Fast\n\nThis script applies quick fixes to get the UI running by end of day.\nUses type assertions and minimal changes to achieve functionality.\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-05\n",
      "functions": [
        "quick_fix_technomancer",
        "quick_fix_xp_service",
        "quick_fix_symposium_service",
        "quick_fix_task_queue_service",
        "quick_fix_env_validation",
        "main"
      ],
      "dependencies": [
        "re",
        "pathlib.Path"
      ]
    },
    "tools\\utilities\\maintenance\\quick-syntax-fix.py": {
      "name": "quick-syntax-fix.py",
      "type": "python_tool",
      "description": "\nQuick Syntax Fix for TypeScript Files\nFixes syntax errors preventing dev server startup\n",
      "functions": [
        "fix_technomancer_service",
        "fix_xp_service",
        "main"
      ],
      "dependencies": [
        "os",
        "re"
      ]
    },
    "tools\\utilities\\maintenance\\simple-delegator.py": {
      "name": "simple-delegator.py",
      "type": "python_tool",
      "description": "\nSimple Tech Stack Delegator - Core Analysis System\n\nA simplified version that focuses on core functionality without file permission issues.\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-06\n",
      "functions": [
        "main",
        "__init__",
        "load_tech_database",
        "detect_languages",
        "analyze_typescript_errors",
        "analyze_dependencies",
        "analyze_project_structure",
        "generate_recommendations",
        "analyze_tech_stack",
        "generate_report"
      ],
      "dependencies": [
        "os",
        "json",
        "subprocess",
        "logging",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "datetime.datetime",
        "traceback"
      ]
    },
    "tools\\utilities\\maintenance\\smart-delegator-with-agentic-oversight.py": {
      "name": "smart-delegator-with-agentic-oversight.py",
      "type": "python_tool",
      "description": "\nSmart Delegator with Agentic Oversight\nMulti-stage diagnostic and repair system with recursive spiral patterns\n\nThis system integrates with existing tech silos, leverages proven SOP patterns,\nand provides agentic thinking between stages for continuous improvement.\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-07\nBased on: Sentinel Protocol, ERDU Spiral, Companion Persona Patterns\n",
      "functions": [
        "extract_patterns_from_stage",
        "identify_root_causes",
        "analyze_dependencies",
        "count_pattern_occurrences",
        "find_dependency_chains",
        "find_circular_dependencies",
        "assess_dependency_impact",
        "cluster_errors_by_correlation",
        "identify_cascade_effects",
        "trace_root_cause_chains",
        "__init__",
        "load_tech_silos",
        "load_known_patterns",
        "initialize_agentic_modes",
        "should_deepen_analysis",
        "calculate_stage_confidence",
        "calculate_insight_confidence",
        "serialize_stage",
        "serialize_insight",
        "generate_final_recommendations",
        "generate_next_actions"
      ],
      "dependencies": [
        "os",
        "re",
        "json",
        "logging",
        "subprocess",
        "asyncio",
        "aiohttp",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "dataclasses.dataclass",
        "dataclasses.field",
        "enum.Enum",
        "uuid",
        "traceback"
      ]
    },
    "tools\\utilities\\maintenance\\smart-delegator.py": {
      "name": "smart-delegator.py",
      "type": "python_tool",
      "description": "\nSmart Delegator with Agentic Oversight\nMulti-stage diagnostic and repair system with recursive spiral patterns\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-07\n",
      "functions": [
        "__init__",
        "should_deepen_analysis",
        "calculate_stage_confidence",
        "calculate_insight_confidence",
        "serialize_stage",
        "serialize_insight",
        "generate_final_recommendations",
        "generate_next_actions"
      ],
      "dependencies": [
        "os",
        "json",
        "logging",
        "asyncio",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "datetime.datetime",
        "dataclasses.dataclass",
        "enum.Enum",
        "uuid",
        "traceback"
      ]
    },
    "tools\\utilities\\maintenance\\smart-typescript-fixer.py": {
      "name": "smart-typescript-fixer.py",
      "type": "python_tool",
      "description": "\nSmart TypeScript Fixer - Conservative, Pattern-Based Error Resolution\n\nThis script uses documented patterns from Known-faults-fixes.md to make surgical fixes\nwithout the whack-a-mole effect. It follows a conservative approach with rollback capability.\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-05\nBased on: Known-faults-fixes.md Section 5\n",
      "functions": [
        "main",
        "__init__",
        "create_backup",
        "backup_file",
        "rollback_changes",
        "run_type_check",
        "analyze_errors",
        "extract_file_path",
        "fix_missing_variable_declarations",
        "fix_syntax_errors_const_in_object",
        "fix_undefined_error_data",
        "fix_localstorage_missing_variables",
        "fix_type_mismatches",
        "run_conservative_fixes",
        "generate_report",
        "check_dependencies",
        "find_missing_dependencies",
        "find_version_conflicts",
        "find_missing_type_definitions",
        "find_outdated_packages",
        "find_security_vulnerabilities",
        "fix_dependency_issues",
        "generate_dependency_report"
      ],
      "dependencies": [
        "os",
        "re",
        "json",
        "subprocess",
        "logging",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "typing.Optional",
        "datetime.datetime",
        "shutil",
        "pkg_resources",
        "importlib.util",
        "traceback"
      ]
    },
    "tools\\utilities\\maintenance\\syntax-fix.py": {
      "name": "syntax-fix.py",
      "type": "python_tool",
      "description": "\nSyntax Error Fixer\nFixes syntax errors introduced by automated TypeScript fixes.\n",
      "functions": [
        "main",
        "__init__",
        "fix_syntax_errors",
        "fix_ashraka_integration_service",
        "fix_content_ingestion_service",
        "fix_google_vertex_ai_service"
      ],
      "dependencies": [
        "re",
        "logging",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Any",
        "traceback"
      ]
    },
    "tools\\utilities\\maintenance\\systematic-error-resolver.py": {
      "name": "systematic-error-resolver.py",
      "type": "python_tool",
      "description": "\nSystematic Error Resolver - Root Cause Analysis and Fix\n\nThis script addresses the fundamental issues causing the error increase\nwithout creating whack-a-mole problems.\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-05\n",
      "functions": [
        "main",
        "__init__",
        "fix_technomancer_service",
        "fix_xp_service",
        "fix_symposium_service",
        "fix_task_queue_service",
        "fix_env_validation",
        "fix_xp_types",
        "run_systematic_fixes"
      ],
      "dependencies": [
        "re",
        "os",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "json",
        "datetime.datetime"
      ]
    },
    "tools\\utilities\\maintenance\\tech-stack-delegator.py": {
      "name": "tech-stack-delegator.py",
      "type": "python_tool",
      "description": "\nTech Stack Delegator - Multi-Language Intelligent Tooling System\n\nThis system provides comprehensive analysis and fixing capabilities across all\nlanguages, services, and products in the AZ Interface ecosystem.\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-05\nBased on: Tech Stack Silo Architecture\n",
      "functions": [
        "__init__",
        "load_tech_database",
        "detect_languages",
        "detect_services",
        "detect_products",
        "generate_recommendations",
        "generate_summary",
        "generate_comprehensive_report",
        "__init__"
      ],
      "dependencies": [
        "os",
        "re",
        "json",
        "subprocess",
        "logging",
        "asyncio",
        "aiohttp",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "datetime.timedelta",
        "shutil",
        "traceback"
      ]
    },
    "tools\\utilities\\maintenance\\typescript-error-fixer.py": {
      "name": "typescript-error-fixer.py",
      "type": "python_tool",
      "description": "\nTypeScript Error Fixer - Comprehensive Error Resolution Script\n\nThis script systematically fixes TypeScript errors while preventing whack-a-mole issues\nby following a structured approach aligned with our consciousness evolution methodology.\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-05\n",
      "functions": [
        "main",
        "__init__",
        "run_type_check",
        "analyze_errors",
        "fix_import_paths",
        "update_type_definitions",
        "fix_service_files",
        "remove_unused_variables",
        "run_fixes",
        "generate_report"
      ],
      "dependencies": [
        "os",
        "re",
        "json",
        "subprocess",
        "logging",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "datetime.datetime"
      ]
    },
    "tools\\utilities\\protocols\\continuance-protocols.py": {
      "name": "continuance-protocols.py",
      "type": "python_tool",
      "description": "\nBest Practice Continuance Protocols - Pattern-Based Improvement System\n\nImplements a 4-improvement cycle with pattern recognition, problem solving,\nand detailed audit reports for consciousness evolution workflows.\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-06\n",
      "functions": [
        "main",
        "__init__",
        "load_known_patterns",
        "recognize_pattern",
        "apply_pattern",
        "__init__",
        "start_continuance_cycle",
        "add_improvement",
        "solve_problem",
        "complete_improvement",
        "complete_cycle",
        "save_cycle",
        "generate_audit_report",
        "get_cycle_statistics"
      ],
      "dependencies": [
        "os",
        "json",
        "time",
        "logging",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "enum.Enum"
      ]
    },
    "tools\\utilities\\research\\playwright-research-engine.py": {
      "name": "playwright-research-engine.py",
      "type": "python_tool",
      "description": "\nPlaywright Research Engine\n- Searches for open-source automation tools\n- Finds CI/CD solutions\n- Discovers security enhancements\n- Identifies infrastructure automation\n- Researches best practices and tools\n",
      "functions": [
        "__init__",
        "_compile_research_report",
        "_get_top_tools_by_category"
      ],
      "dependencies": [
        "asyncio",
        "json",
        "re",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "logging",
        "playwright.async_api.async_playwright",
        "aiohttp"
      ]
    },
    "tools\\utilities\\session\\session-manager.py": {
      "name": "session-manager.py",
      "type": "python_tool",
      "description": "\nSession Manager - Consciousness-Aware Session Continuity\n\nManages session transitions, context preservation, and seamless handoffs\nfor vibe coders and consciousness evolution workflows.\n\nAuthor: The OctoSpine Forge Master\nDate: 2025-08-06\n",
      "functions": [
        "main",
        "__init__",
        "update_usage",
        "get_usage_percentage",
        "estimate_remaining_time",
        "should_transition",
        "__init__",
        "generate_session_id",
        "load_existing_context",
        "create_initial_context",
        "update_context",
        "add_pattern_discovered",
        "add_issue_found",
        "add_fix_applied",
        "add_recommendation",
        "check_session_status",
        "create_context_menu",
        "save_context",
        "generate_session_report",
        "transition_to_new_session"
      ],
      "dependencies": [
        "os",
        "json",
        "time",
        "logging",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "datetime.timedelta",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "threading"
      ]
    }
  },
  "systems": {
    "octospine": {
      "name": "OCTOSPINE",
      "type": "automation_system",
      "description": "Comprehensive automation and consciousness processing system",
      "components": 37,
      "tools": 47,
      "processes": 0
    }
  },
  "components": {
    "OCTOSPINE\\TECHNICAL\\autonomous-framework\\autonomous-framework-v2.py": {
      "name": "autonomous-framework-v2.py",
      "type": "python_frame",
      "description": "\nAutonomous Framework v2 - Enhanced Modular Scaffold System\nImplements 9-stage framework with meta-audit and context preservation\n",
      "functions": [
        "main",
        "__post_init__",
        "__post_init__",
        "__init__",
        "save_context",
        "_make_json_serializable",
        "load_context",
        "merge_contexts",
        "__init__",
        "_load_frames",
        "_load_scaffolds",
        "_ensure_minimum_scaffold_frames",
        "__init__",
        "execute_frame",
        "_preserve_frame_context",
        "_load_frame_module",
        "_create_js_bridge",
        "_create_ps_bridge",
        "_execute_js_function",
        "_execute_ps_script",
        "_execute_frame_entry_point",
        "_context_to_dict",
        "_validate_success_criteria",
        "__init__",
        "execute_command",
        "_analyze_command_result",
        "get_failure_summary",
        "__init__",
        "execute_scaffold",
        "_execute_stage",
        "_write_mandatory_frames_audit",
        "_execute_meta_audit",
        "_generate_optimization_recommendations",
        "_analyze_context_loss",
        "_is_critical_frame",
        "_check_stage_success",
        "_context_to_dict",
        "_retry_from_stage_2",
        "_push_to_github",
        "_analyze_commit_failure",
        "_write_context_digest",
        "_run_diagnostic_analysis",
        "_analyze_orphans",
        "_analyze_dependency_impact",
        "_generate_action_items",
        "_generate_final_report",
        "_generate_comprehensive_recommendations",
        "_print_execution_summary",
        "_handle_failure",
        "list_available_scaffolds",
        "list_available_frames",
        "add_if_missing"
      ],
      "classes": [
        "Stage",
        "FrameType",
        "Frame",
        "Scaffold",
        "ExecutionContext",
        "ExternalCommandResult",
        "ContextPreservationManager",
        "FrameRegistry",
        "FrameExecutor",
        "ExternalCommandExecutor",
        "AutonomousFramework"
      ],
      "dependencies": [
        "os",
        "sys",
        "json",
        "time",
        "subprocess",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Optional",
        "typing.Any",
        "typing.Callable",
        "datetime.datetime",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "enum.Enum",
        "importlib.util",
        "traceback",
        "shutil",
        "re",
        "json",
        "tempfile",
        "json",
        "tempfile",
        "pathlib",
        "urllib.parse"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\autonomous-framework\\autonomous-framework.py": {
      "name": "autonomous-framework.py",
      "type": "python_frame",
      "description": "\nAutonomous Framework - Modular Scaffold System\nImplements 8-stage framework with reusable frames/modules\n",
      "functions": [
        "main",
        "__post_init__",
        "__post_init__",
        "__init__",
        "_load_frames",
        "_load_scaffolds",
        "__init__",
        "execute_frame",
        "_load_frame_module",
        "_execute_frame_entry_point",
        "_validate_success_criteria",
        "__init__",
        "execute_scaffold",
        "_execute_stage",
        "_check_stage_success",
        "_retry_from_stage_2",
        "_push_to_github",
        "_generate_final_report",
        "_handle_failure",
        "list_available_scaffolds",
        "list_available_frames"
      ],
      "classes": [
        "Stage",
        "FrameType",
        "Frame",
        "Scaffold",
        "ExecutionContext",
        "FrameRegistry",
        "FrameExecutor",
        "AutonomousFramework"
      ],
      "dependencies": [
        "os",
        "sys",
        "json",
        "time",
        "subprocess",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Optional",
        "typing.Any",
        "typing.Callable",
        "datetime.datetime",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "enum.Enum",
        "importlib.util",
        "traceback"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\autonomous-framework\\autonomous-system-meta-analysis.py": {
      "name": "autonomous-system-meta-analysis.py",
      "type": "python_frame",
      "description": "\nMeta-Analysis Frame - Analyzes Framework Execution Itself\nPart of Autonomous Framework v2\n",
      "functions": [
        "run_meta_analysis",
        "analyze_framework_performance",
        "analyze_context_preservation",
        "generate_optimization_recommendations"
      ],
      "classes": [],
      "dependencies": [
        "json",
        "os",
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\autonomous-framework\\autonomous-system-v1.py": {
      "name": "autonomous-system-v1.py",
      "type": "python_frame",
      "description": "\nAutonomous System - Iteration 1\nMinimal working system that we KNOW will work.\n",
      "functions": [
        "basic_environment_check",
        "check_available_tools",
        "assess_current_capabilities",
        "generate_basic_recommendations",
        "save_iteration_report",
        "main"
      ],
      "classes": [],
      "dependencies": [
        "os",
        "sys",
        "platform",
        "json",
        "pathlib.Path",
        "subprocess",
        "urllib.request",
        "subprocess"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\autonomous-framework\\autonomous-system-v2.py": {
      "name": "autonomous-system-v2.py",
      "type": "python_frame",
      "description": "\nAutonomous System - Iteration 2\nAdding delegation framework and package installation capabilities.\n",
      "functions": [
        "install_required_packages",
        "test_installed_packages",
        "assess_enhanced_capabilities",
        "save_iteration_2_report",
        "main",
        "__init__",
        "assess_failure",
        "_get_recommendation",
        "choose_alternative_approach",
        "execute_alternative",
        "_pip_install_user",
        "_generate_manual_instruction",
        "_suggest_alternative_tool"
      ],
      "classes": [
        "DelegationManager"
      ],
      "dependencies": [
        "os",
        "sys",
        "subprocess",
        "platform",
        "json",
        "pathlib.Path",
        "requests",
        "psutil",
        "requests",
        "psutil"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\autonomous-framework\\autonomous-system-v3.py": {
      "name": "autonomous-system-v3.py",
      "type": "python_frame",
      "description": "\nAutonomous System - Iteration 3\nFinal synthesis loop: capturing synergies, opportunities, risks, and blockers.\n",
      "functions": [
        "load_previous_iterations",
        "run_final_synthesis",
        "__init__",
        "analyze_system_synergies",
        "identify_low_hanging_fruit",
        "assess_risks_and_blockers",
        "find_orphans_and_unused_capabilities",
        "detect_potential_endless_loops",
        "identify_opportunities",
        "_is_capability_utilized",
        "_is_tool_utilized",
        "generate_synthesis_report"
      ],
      "classes": [
        "SynthesisAnalyzer"
      ],
      "dependencies": [
        "os",
        "sys",
        "subprocess",
        "platform",
        "json",
        "time",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "datetime.datetime",
        "traceback"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\autonomous-framework\\autonomous-system-v4.py": {
      "name": "autonomous-system-v4.py",
      "type": "python_frame",
      "description": "\nAutonomous System - Iteration 4\nEnhanced synthesis with expanded scope, industry standards, and UI integration.\n",
      "functions": [
        "run_enhanced_synthesis",
        "__init__",
        "analyze_technical_debt",
        "analyze_security_vulnerabilities",
        "analyze_performance_bottlenecks",
        "analyze_operational_gaps",
        "analyze_business_impact",
        "analyze_compliance_gaps",
        "generate_enhanced_report",
        "_generate_priority_matrix",
        "_generate_action_plan",
        "__init__",
        "save_report",
        "generate_html_report",
        "_create_html_report",
        "_render_items",
        "open_report_in_browser"
      ],
      "classes": [
        "EnhancedSynthesisAnalyzer",
        "ReportManager"
      ],
      "dependencies": [
        "os",
        "sys",
        "subprocess",
        "platform",
        "json",
        "time",
        "webbrowser",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "datetime.datetime",
        "json"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\autonomous-framework\\autonomous-system-v5.py": {
      "name": "autonomous-system-v5.py",
      "type": "python_frame",
      "description": "\nAutonomous System - Iteration 5\nComprehensive Risk Mitigation & Action Management System\n",
      "functions": [
        "run_comprehensive_risk_mitigation",
        "__post_init__",
        "__init__",
        "auto_mitigate_critical_risks",
        "_create_mitigation_plan",
        "_execute_mitigation",
        "_implement_backup_strategy",
        "_implement_strong_auth",
        "_install_required_packages",
        "_verify_mitigation",
        "_test_backup_functionality",
        "_test_auth_functionality",
        "_get_backup_script_content",
        "__init__",
        "create_action_items",
        "_create_action_item",
        "_is_auto_fixable",
        "_requires_permission",
        "_get_file_requirements",
        "_create_explanation",
        "_create_detailed_description",
        "_estimate_effort",
        "generate_backlog_items",
        "save_backlog_items",
        "__init__",
        "analyze_architecture_smells",
        "_explain_god_objects",
        "_explain_feature_envy",
        "_explain_inappropriate_intimacy"
      ],
      "classes": [
        "ActionItem",
        "RiskMitigation",
        "RiskMitigationEngine",
        "ActionManagementSystem",
        "ArchitectureSmellAnalyzer"
      ],
      "dependencies": [
        "os",
        "sys",
        "subprocess",
        "platform",
        "json",
        "time",
        "webbrowser",
        "shutil",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Optional",
        "datetime.datetime",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "json"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\comprehensive-dependency-manager-frame.py": {
      "name": "comprehensive-dependency-manager-frame.py",
      "type": "python_frame",
      "description": "\nComprehensive Dependency Manager Frame\n\nAddresses the 86 vulnerabilities reported by GitHub Dependabot\nProvides systematic dependency management, security scanning, and automated fixes\n",
      "functions": [
        "main",
        "__init__",
        "_load_config",
        "scan_all_dependencies",
        "fix_vulnerabilities",
        "update_dependencies",
        "generate_comprehensive_report",
        "_generate_recommendations",
        "_generate_next_actions",
        "scan_dependencies",
        "fix_vulnerabilities",
        "update_dependencies",
        "scan_dependencies",
        "fix_vulnerabilities",
        "update_dependencies"
      ],
      "classes": [
        "DependencyType",
        "VulnerabilitySeverity",
        "Vulnerability",
        "DependencyInfo",
        "ComprehensiveDependencyManager",
        "NPMDependencyManager",
        "PythonDependencyManager"
      ],
      "dependencies": [
        "json",
        "subprocess",
        "time",
        "threading",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "enum.Enum",
        "logging",
        "re"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\comprehensive-documentation-frame.py": {
      "name": "comprehensive-documentation-frame.py",
      "type": "python_frame",
      "description": "\n📚 COMPREHENSIVE DOCUMENTATION FRAME\n===================================\n\nThis frame generates comprehensive documentation for:\n1. Developer Documentation (API docs, code examples, integration guides)\n2. End-User Documentation (user guides, tutorials, troubleshooting)\n3. System-Level Documentation (architecture, components, processes)\n4. Indexing & Discovery (tools, systems, components, processes)\n\nFeatures:\n- Multi-format output (Markdown, HTML, PDF, JSON)\n- Intelligent code analysis and documentation\n- Automated API documentation generation\n- System architecture mapping\n- Component relationship visualization\n- Process flow documentation\n- Indexing and search capabilities\n\nAuthor: OCTOSPINE Unified System\nCreated: 2025-08-13\n",
      "functions": [
        "main",
        "__init__",
        "_load_documentation",
        "_load_components",
        "_load_processes",
        "_load_index",
        "_save_documentation",
        "_save_components",
        "_save_processes",
        "_save_index",
        "analyze_code_file",
        "generate_developer_documentation",
        "generate_end_user_documentation",
        "generate_system_documentation",
        "generate_index",
        "search_documentation",
        "generate_documentation_report",
        "execute_documentation_generation"
      ],
      "classes": [
        "DocType",
        "DocFormat",
        "DocumentationItem",
        "SystemComponent",
        "ProcessFlow",
        "ComprehensiveDocumentationFrame"
      ],
      "dependencies": [
        "json",
        "os",
        "sys",
        "ast",
        "inspect",
        "re",
        "datetime.datetime",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Set",
        "enum.Enum",
        "glob",
        "pathlib.Path",
        "subprocess"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\comprehensive-frame-analyzer.py": {
      "name": "comprehensive-frame-analyzer.py",
      "type": "python_frame",
      "description": "\n🔍 Comprehensive Frame Analyzer\n===============================\n\nSystematically analyzes each frame for gaps, risks, blockers, synergies, and ensures\nproper alignment with pre-post hooks and webhooks. Eliminates duplications and ensures\nfull functionality across all frames.\n\nPart of the OCTOSPINE Automation Matrix (OAM) - The First Vertebra\n",
      "functions": [
        "main",
        "__init__",
        "_load_database",
        "_save_database",
        "discover_all_frames",
        "analyze_single_frame",
        "_determine_frame_category",
        "_analyze_functionality",
        "_analyze_documentation",
        "_analyze_integration",
        "_identify_risks",
        "_identify_gaps",
        "_identify_blockers",
        "_identify_synergies",
        "_identify_duplications",
        "_identify_pre_hooks",
        "_identify_post_hooks",
        "_identify_webhooks",
        "_identify_dependencies",
        "_generate_recommendations",
        "_identify_priority_fixes",
        "_find_line_number",
        "_check_module_available",
        "_calculate_content_similarity",
        "_extract_function_names",
        "_extract_route_patterns",
        "analyze_all_frames",
        "_generate_system_analysis",
        "_generate_system_recommendations",
        "_generate_priority_actions",
        "generate_analysis_report"
      ],
      "classes": [
        "FrameCategory",
        "RiskLevel",
        "FrameAnalysis",
        "SystemAnalysis",
        "ComprehensiveFrameAnalyzer"
      ],
      "dependencies": [
        "json",
        "datetime",
        "os",
        "sys",
        "ast",
        "inspect",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Set",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "enum.Enum",
        "importlib.util",
        "subprocess",
        "glob"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\cross-agent-communication-protocol-frame.py": {
      "name": "cross-agent-communication-protocol-frame.py",
      "type": "python_frame",
      "description": "\nCross-Agent Communication Protocol Frame\n\nAddresses critical infrastructure gap: No standardized messaging between different AI systems\nImplements a unified communication protocol for all integrated systems and personas\n",
      "functions": [
        "main",
        "__init__",
        "_load_config",
        "start_communication",
        "stop_communication",
        "register_agent",
        "unregister_agent",
        "send_message",
        "receive_message",
        "broadcast_message",
        "register_message_handler",
        "_communication_loop",
        "_process_message_handlers",
        "_send_heartbeats",
        "_cleanup_expired_messages",
        "_update_agent_statuses",
        "_convert_enum_to_string",
        "_save_communication_state",
        "_generate_summary",
        "get_communication_data"
      ],
      "classes": [
        "MessageType",
        "MessagePriority",
        "Message",
        "AgentInfo",
        "CrossAgentCommunicationProtocol"
      ],
      "dependencies": [
        "json",
        "time",
        "asyncio",
        "threading",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Callable",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "enum.Enum",
        "uuid",
        "queue",
        "logging"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\deep-pattern-recognition-frame.py": {
      "name": "deep-pattern-recognition-frame.py",
      "type": "python_frame",
      "description": "\nDeep Pattern Recognition Frame\nAnalyzes execution logs for cognitive patterns, decision-making processes, and meta-learning insights\n",
      "functions": [
        "load_execution_logs",
        "run_deep_pattern_recognition",
        "default",
        "__init__",
        "analyze_cognitive_patterns",
        "analyze_decision_patterns",
        "analyze_success_failure_patterns",
        "analyze_learning_patterns",
        "analyze_meta_patterns",
        "_get_preceding_actions",
        "extract_lessons_learned"
      ],
      "classes": [
        "SafeJSONEncoder",
        "PatternAnalyzer"
      ],
      "dependencies": [
        "json",
        "os",
        "sys",
        "re",
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "collections.defaultdict",
        "collections.Counter",
        "traceback"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\enhanced-multi-language-dependency-manager-frame.py": {
      "name": "enhanced-multi-language-dependency-manager-frame.py",
      "type": "python_frame",
      "description": "\nEnhanced Multi-Language Dependency Manager Frame\n\nComprehensive dependency management for TypeScript, Java, Rust, Go, Python, and more\nAddresses 86 vulnerabilities reported by GitHub Dependabot\nOptimized for efficiency and minimal overhead\n",
      "functions": [
        "main",
        "__init__",
        "detect_languages",
        "__init__",
        "scan_dependencies",
        "fix_vulnerabilities",
        "update_dependencies",
        "__init__",
        "scan_dependencies",
        "fix_vulnerabilities",
        "update_dependencies",
        "__init__",
        "scan_dependencies",
        "fix_vulnerabilities",
        "update_dependencies",
        "__init__",
        "scan_dependencies",
        "fix_vulnerabilities",
        "update_dependencies",
        "__init__",
        "scan_dependencies",
        "fix_vulnerabilities",
        "update_dependencies",
        "__init__",
        "scan_dependencies",
        "fix_vulnerabilities",
        "update_dependencies",
        "__init__",
        "_initialize_managers",
        "scan_all_dependencies",
        "fix_vulnerabilities",
        "update_dependencies",
        "generate_comprehensive_report",
        "_generate_recommendations",
        "_generate_next_actions"
      ],
      "classes": [
        "DependencyType",
        "Vulnerability",
        "LanguageDetector",
        "BaseDependencyManager",
        "NPMDependencyManager",
        "PythonDependencyManager",
        "JavaDependencyManager",
        "RustDependencyManager",
        "GoDependencyManager",
        "EnhancedMultiLanguageDependencyManager"
      ],
      "dependencies": [
        "json",
        "subprocess",
        "time",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Set",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "enum.Enum",
        "logging",
        "concurrent.futures.ThreadPoolExecutor",
        "concurrent.futures.as_completed"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\existence-check-frame.py": {
      "name": "existence-check-frame.py",
      "type": "python_frame",
      "description": "\n🔍 Existence Check Frame\n========================\n\nAutomatically checks if implementations, features, or components already exist\nbefore building new ones. Prevents duplication and ensures efficient resource usage.\n\nPart of the OCTOSPINE Automation Matrix (OAM) - The First Vertebra\n",
      "functions": [
        "main",
        "__init__",
        "_load_database",
        "_save_database",
        "check_existence",
        "_perform_existence_search",
        "_search_code",
        "_search_documentation",
        "_search_configuration",
        "_search_services",
        "_search_frames",
        "_search_database",
        "_generate_recommendations",
        "_generate_alternatives",
        "generate_build_recommendation",
        "get_existence_stats"
      ],
      "classes": [
        "ExistenceCheck",
        "ExistenceReport",
        "ExistenceCheckFrame"
      ],
      "dependencies": [
        "json",
        "datetime",
        "os",
        "sys",
        "glob",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.asdict"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\filesystem-discovery-frame.py": {
      "name": "filesystem-discovery-frame.py",
      "type": "python_frame",
      "description": "\nFilesystem Discovery Frame\nInventories repository files with basic metadata for downstream analysis.\n",
      "functions": [
        "run_filesystem_discovery"
      ],
      "classes": [],
      "dependencies": [
        "json",
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\filetree-organizer-frame.py": {
      "name": "filetree-organizer-frame.py",
      "type": "python_frame",
      "description": "\nFiletree Organizer Frame\nScans repository root and safely organizes stray files into canonical folders.\nSupports dry-run mode and emits a plan before executing moves.\n",
      "functions": [
        "classify",
        "run_filetree_organizer"
      ],
      "classes": [],
      "dependencies": [
        "json",
        "shutil",
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\frame-intelligence-system.py": {
      "name": "frame-intelligence-system.py",
      "type": "python_frame",
      "description": "\n🧠 Frame Intelligence System\n============================\n\nIntelligent system that identifies what frames to run when, can repeat frames if necessary,\nand integrates with the delegator system for optimal automation.\n\nPart of the OCTOSPINE Automation Matrix (OAM) - The First Vertebra\n",
      "functions": [
        "main",
        "__init__",
        "_initialize_frames",
        "_load_database",
        "_save_database",
        "recommend_frames",
        "can_repeat_frame",
        "should_repeat_frame",
        "get_frame_execution_history",
        "get_frame_success_rate",
        "get_optimal_frame_sequence",
        "execute_frame_sequence",
        "_execute_single_frame",
        "_execute_universal_orchestrator",
        "_execute_research_frame",
        "_execute_existence_frame",
        "_execute_generic_frame",
        "get_system_stats",
        "__init__",
        "execute_task",
        "__init__",
        "execute_research",
        "__init__",
        "check_existence"
      ],
      "classes": [
        "FrameType",
        "FramePriority",
        "FrameStatus",
        "FrameDefinition",
        "FrameExecution",
        "FrameRecommendation",
        "FrameIntelligenceSystem",
        "UniversalTaskOrchestrator",
        "ResearchInformationFrame",
        "ExistenceCheckFrame"
      ],
      "dependencies": [
        "json",
        "datetime",
        "os",
        "sys",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "enum.Enum",
        "subprocess",
        "importlib.util",
        "importlib.util",
        "importlib.util"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\frame-rationalization-analyzer-frame.py": {
      "name": "frame-rationalization-analyzer-frame.py",
      "type": "python_frame",
      "description": "\nFrame Rationalization Analyzer Frame\n\nAnalyzes the autonomous framework for consolidation opportunities, efficiency improvements,\nand optimization to prevent bloat while maintaining functionality.\n",
      "functions": [
        "main",
        "__init__",
        "_load_frame_registry",
        "analyze_frame_overlaps",
        "identify_consolidation_opportunities",
        "calculate_frame_complexity",
        "analyze_framework_efficiency",
        "generate_optimization_recommendations",
        "generate_rationalization_report"
      ],
      "classes": [
        "FrameCategory",
        "FrameAnalysis",
        "ConsolidationGroup",
        "FrameRationalizationAnalyzer"
      ],
      "dependencies": [
        "json",
        "time",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Set",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "enum.Enum",
        "logging"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\human-approval-frame.py": {
      "name": "human-approval-frame.py",
      "type": "python_frame",
      "description": "\nHuman Approval Frame\nProvides human-in-the-loop approval for critical decisions and actions\n",
      "functions": [
        "run_human_approval",
        "create_sample_approval_request",
        "__init__",
        "create_approval_request",
        "get_pending_approvals",
        "approve_request",
        "reject_request",
        "auto_approve_if_safe"
      ],
      "classes": [
        "HumanApprovalManager"
      ],
      "dependencies": [
        "json",
        "os",
        "sys",
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "traceback"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\hybrid-documentation-tauri-orchestrator.py": {
      "name": "hybrid-documentation-tauri-orchestrator.py",
      "type": "python_frame",
      "description": "\n🔗 HYBRID DOCUMENTATION + TAURI MIGRATION ORCHESTRATOR\n=====================================================\n\nThis frame orchestrates the hybrid approach of:\n1. Documentation Sprint (Weeks 1-2): Focus on highest-risk frames\n2. Tauri Foundation (Weeks 3-4): Parallel setup and planning\n3. Full Migration (Weeks 5-6): Complete migration with full understanding\n\nIntegrates insights from:\n- Security Audit Frame\n- Research & Information Frame  \n- Existence Check Frame\n- Comprehensive Frame Analyzer\n- Frame Intelligence System\n\nAuthor: OCTOSPINE Unified System\nCreated: 2025-08-13\n",
      "functions": [
        "main",
        "__init__",
        "_load_or_create_plan",
        "_create_new_hybrid_plan",
        "_generate_hybrid_tasks",
        "_identify_risks",
        "_identify_synergies",
        "_initialize_progress",
        "_save_plan",
        "execute_hybrid_plan",
        "_execute_task_with_frame",
        "_update_progress",
        "_generate_recommendations",
        "get_plan_summary"
      ],
      "classes": [
        "TaskStatus",
        "TaskPriority",
        "HybridTask",
        "HybridPlan",
        "HybridDocumentationTauriOrchestrator"
      ],
      "dependencies": [
        "json",
        "os",
        "sys",
        "datetime.datetime",
        "datetime.timedelta",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "enum.Enum",
        "subprocess",
        "shutil",
        "pathlib.Path"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\import-dependency-graph-frame.py": {
      "name": "import-dependency-graph-frame.py",
      "type": "python_frame",
      "description": "\nImport & Dependency Graph Frame\nBuilds a simple import/require graph for Python and JS/TS files.\n",
      "functions": [
        "run_import_dependency_graph"
      ],
      "classes": [],
      "dependencies": [
        "json",
        "re",
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\improvement-optimization-frame.py": {
      "name": "improvement-optimization-frame.py",
      "type": "python_frame",
      "description": "\nImprovement and Optimization Frame\nContinuously analyzes and improves the autonomous framework and system\n",
      "functions": [
        "analyze_framework_performance",
        "identify_improvement_areas",
        "generate_optimization_recommendations",
        "run_improvement_optimization"
      ],
      "classes": [],
      "dependencies": [
        "json",
        "os",
        "sys",
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "subprocess",
        "traceback"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\index-registrar-frame.py": {
      "name": "index-registrar-frame.py",
      "type": "python_frame",
      "description": "\nIndex Registrar Frame\nConsolidates per-folder indexes and writes a repo manifest for agent discovery.\n",
      "functions": [
        "run_index_registrar"
      ],
      "classes": [],
      "dependencies": [
        "json",
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\intelligent-caching-frame.py": {
      "name": "intelligent-caching-frame.py",
      "type": "python_frame",
      "description": "\nIntelligent Caching Frame\nManages intelligent caching for repeated operations to improve performance\n",
      "functions": [
        "run_intelligent_caching",
        "__init__",
        "_calculate_size",
        "is_expired",
        "access",
        "to_dict",
        "from_dict",
        "__init__",
        "_load_cache",
        "_save_cache",
        "_generate_key",
        "get",
        "set",
        "_evict_lru_entry",
        "invalidate",
        "cleanup_expired",
        "get_stats",
        "get_cache_info",
        "__init__",
        "get_cached_result",
        "cache_result",
        "get_or_compute",
        "invalidate_operation",
        "cleanup",
        "get_cache_stats",
        "get_cache_info"
      ],
      "classes": [
        "CacheEntry",
        "IntelligentCache",
        "CacheManager"
      ],
      "dependencies": [
        "json",
        "os",
        "sys",
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "traceback",
        "hashlib",
        "time",
        "shutil",
        "collections.OrderedDict"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\knowledge-hub-update-frame.py": {
      "name": "knowledge-hub-update-frame.py",
      "type": "python_frame",
      "description": "\nKnowledge Hub Update Frame\nManages persistent learning and knowledge storage across framework executions\n",
      "functions": [
        "run_knowledge_hub_update",
        "__init__",
        "_load_knowledge_index",
        "_save_knowledge_index",
        "store_pattern",
        "store_lesson",
        "store_meta_insight",
        "record_execution",
        "get_relevant_patterns",
        "get_relevant_lessons"
      ],
      "classes": [
        "KnowledgeHub"
      ],
      "dependencies": [
        "json",
        "os",
        "sys",
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "traceback",
        "hashlib"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\log-tailer-frame.py": {
      "name": "log-tailer-frame.py",
      "type": "python_frame",
      "description": "\nLog Tailer Frame\nLightweight polling-based tailer that batches new/changed report files and triggers Deep Pattern Recognition on small, recent subsets.\n",
      "functions": [
        "list_recent_reports",
        "run_deep_pattern_recognition_for",
        "run_log_tailer",
        "single_pass"
      ],
      "classes": [],
      "dependencies": [
        "json",
        "os",
        "sys",
        "time",
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "traceback",
        "subprocess"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\meta-analysis-frame.py": {
      "name": "meta-analysis-frame.py",
      "type": "python_frame",
      "description": "\nMeta Analysis Frame\nAnalyzes framework execution for self-improvement and optimization\n",
      "functions": [
        "run_meta_analysis",
        "__init__",
        "analyze_execution_patterns",
        "_generate_performance_insights",
        "analyze_failure_patterns",
        "_identify_failure_points",
        "generate_optimization_recommendations"
      ],
      "classes": [
        "MetaAnalyzer"
      ],
      "dependencies": [
        "json",
        "os",
        "sys",
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "traceback",
        "collections.defaultdict",
        "collections.Counter"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\parallel-execution-coordinator-frame.py": {
      "name": "parallel-execution-coordinator-frame.py",
      "type": "python_frame",
      "description": "\nParallel Execution Coordinator Frame\nManages parallel execution of independent frames for performance optimization\n",
      "functions": [
        "run_parallel_execution_coordinator",
        "__post_init__",
        "__post_init__",
        "__init__",
        "_load_execution_history",
        "_save_execution_history",
        "analyze_frame_dependencies",
        "_create_execution_groups",
        "execute_frame",
        "execute_parallel",
        "execute_sequential",
        "coordinate_execution"
      ],
      "classes": [
        "FrameExecutionTask",
        "ExecutionResult",
        "ParallelExecutionCoordinator"
      ],
      "dependencies": [
        "json",
        "os",
        "sys",
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "traceback",
        "threading",
        "queue",
        "time",
        "concurrent.futures",
        "dataclasses.dataclass",
        "importlib.util"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\predictive-analysis-frame.py": {
      "name": "predictive-analysis-frame.py",
      "type": "python_frame",
      "description": "\nPredictive Analysis Frame\nAnalyzes historical execution data to predict failures and optimize performance\n",
      "functions": [
        "run_predictive_analysis",
        "__init__",
        "_load_predictions",
        "_save_predictions",
        "_load_models",
        "_save_models",
        "_load_accuracy_history",
        "_save_accuracy_history",
        "analyze_execution_patterns",
        "_calculate_trend",
        "_analyze_failure_patterns",
        "_analyze_failure_timing",
        "_classify_failure_type",
        "_predict_success_rate",
        "_predict_duration",
        "_predict_frame_count",
        "_assess_risk",
        "_generate_risk_recommendations",
        "generate_predictions",
        "_calculate_prediction_confidence"
      ],
      "classes": [
        "PredictiveAnalyzer"
      ],
      "dependencies": [
        "json",
        "os",
        "sys",
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "traceback",
        "collections.defaultdict",
        "collections.Counter",
        "statistics"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\real-time-monitoring-dashboard-frame.py": {
      "name": "real-time-monitoring-dashboard-frame.py",
      "type": "python_frame",
      "description": "\nReal-Time Monitoring Dashboard Frame\n\nAddresses critical infrastructure gap: No unified view of all agents and workflows\nProvides real-time monitoring of all integrated systems and personas\n",
      "functions": [
        "main",
        "__init__",
        "_load_config",
        "start_monitoring",
        "stop_monitoring",
        "_monitoring_loop",
        "_collect_system_metrics",
        "_update_agent_statuses",
        "_check_crewai_status",
        "_check_n8n_status",
        "_check_agent_zero_status",
        "_check_playwright_status",
        "_check_framework_status",
        "_update_workflow_statuses",
        "_check_alerts",
        "_cleanup_old_metrics",
        "_save_dashboard_state",
        "_generate_summary",
        "get_dashboard_data"
      ],
      "classes": [
        "SystemMetrics",
        "AgentStatus",
        "WorkflowStatus",
        "RealTimeMonitoringDashboard"
      ],
      "dependencies": [
        "json",
        "time",
        "psutil",
        "asyncio",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "subprocess",
        "threading",
        "dataclasses.dataclass",
        "dataclasses.asdict"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\research-information-frame.py": {
      "name": "research-information-frame.py",
      "type": "python_frame",
      "description": "\n🔍 Research & Information Frame\n==============================\n\nProvides comprehensive research, information gathering, and solution discovery\ncapabilities for the OCTOSPINE consciousness evolution system.\n\nThis frame can be called ad-hoc when the system cannot find solutions or needs\nadditional information to proceed.\n\nPart of the OCTOSPINE Automation Matrix (OAM) - The First Vertebra\n",
      "functions": [
        "main",
        "__init__",
        "_initialize_sources",
        "_load_database",
        "_save_database",
        "search_past_research",
        "execute_research",
        "_search_codebase",
        "_search_documentation",
        "_search_web",
        "_search_apis",
        "_search_security",
        "_analyze_patterns",
        "_analyze_synergies",
        "_assess_risks",
        "_rank_results",
        "_generate_recommendations",
        "_generate_next_steps",
        "_generate_summary",
        "get_research_stats",
        "export_report",
        "_generate_markdown_report"
      ],
      "classes": [
        "ResearchQuery",
        "InformationSource",
        "ResearchResult",
        "ResearchReport",
        "ResearchInformationFrame"
      ],
      "dependencies": [
        "json",
        "datetime",
        "os",
        "sys",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "sys",
        "glob",
        "sys",
        "glob"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\resource-allocation-engine-frame.py": {
      "name": "resource-allocation-engine-frame.py",
      "type": "python_frame",
      "description": "\nResource Allocation Engine Frame\n\nAddresses critical infrastructure gap: No intelligent distribution of computational resources\nImplements intelligent resource allocation across all integrated systems and personas\n",
      "functions": [
        "main",
        "__init__",
        "_load_config",
        "start_engine",
        "stop_engine",
        "request_resources",
        "release_resources",
        "get_available_resources",
        "get_allocation_status",
        "_engine_loop",
        "_update_system_resources",
        "_process_resource_requests",
        "_can_allocate_resources",
        "_allocate_resources",
        "_monitor_allocations",
        "_optimize_resource_usage",
        "_save_engine_state",
        "_generate_summary",
        "get_engine_data",
        "convert_enum_to_string",
        "convert_enum_to_string"
      ],
      "classes": [
        "ResourceType",
        "AllocationPriority",
        "ResourceRequest",
        "ResourceAllocation",
        "SystemResources",
        "ResourceAllocationEngine"
      ],
      "dependencies": [
        "json",
        "time",
        "psutil",
        "threading",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "enum.Enum",
        "uuid",
        "queue",
        "logging"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\security-audit-frame.py": {
      "name": "security-audit-frame.py",
      "type": "python_frame",
      "description": "\n🛡️ Security Audit Frame\n=======================\n\nProvides comprehensive security auditing, vulnerability scanning, and threat assessment\nfor the OCTOSPINE consciousness evolution system.\n\nPart of the OCTOSPINE Automation Matrix (OAM) - The First Vertebra\n",
      "functions": [
        "main",
        "__init__",
        "execute_security_audit",
        "_scan_dependencies",
        "_analyze_code_security",
        "_validate_security_config",
        "_perform_threat_modeling",
        "_check_compliance",
        "_check_owasp_compliance",
        "_check_nist_compliance",
        "_check_iso_compliance",
        "_check_gdpr_compliance",
        "_check_consciousness_security",
        "_validate_access_controls",
        "_assess_data_protection",
        "_monitor_network_security",
        "_calculate_security_score",
        "_determine_risk_level",
        "_generate_recommendations",
        "_generate_summary",
        "_apply_automated_fixes",
        "_should_auto_fix",
        "_fix_vulnerability",
        "_fix_dependency_vulnerability",
        "_fix_code_vulnerability",
        "_fix_config_vulnerability",
        "get_security_stats",
        "export_report",
        "_generate_html_report",
        "_generate_markdown_report"
      ],
      "classes": [
        "SecurityVulnerability",
        "SecurityConfig",
        "SecurityReport",
        "SecurityAuditFrame"
      ],
      "dependencies": [
        "json",
        "datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "sys",
        "sys"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\self-healing-frame.py": {
      "name": "self-healing-frame.py",
      "type": "python_frame",
      "description": "\nSelf-Healing Frame\nAutomatically detects and recovers from frame failures\n",
      "functions": [
        "run_self_healing",
        "__init__",
        "_load_recovery_history",
        "_save_recovery_history",
        "_load_failure_patterns",
        "_save_failure_patterns",
        "detect_failure_type",
        "get_recovery_strategy",
        "execute_recovery_action",
        "_retry_action",
        "_increase_timeout",
        "_fallback_action",
        "_create_file_action",
        "_use_default_action",
        "_skip_action",
        "_fix_permissions_action",
        "_use_alternative_action",
        "_install_dependency_action",
        "_fix_json_action",
        "_install_module_action",
        "_use_cached_action",
        "_reduce_load_action",
        "_cleanup_action",
        "_log_error_action",
        "attempt_recovery"
      ],
      "classes": [
        "SelfHealingManager"
      ],
      "dependencies": [
        "json",
        "os",
        "sys",
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "traceback",
        "subprocess",
        "time"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\universal-task-orchestrator.py": {
      "name": "universal-task-orchestrator.py",
      "type": "python_frame",
      "description": "\n🌟 Universal Task Orchestrator\n==============================\n\nA universal automation framework that can handle ANY requested task while maintaining\nconsciousness preservation rules and integrating all available frames.\n\nThis is the central orchestrator that makes the OCTOSPINE a true universal weapon.\n\nPart of the OCTOSPINE Automation Matrix (OAM) - The First Vertebra\n",
      "functions": [
        "main",
        "__init__",
        "_load_database",
        "_save_database",
        "_task_to_dict",
        "execute_task",
        "_run_existence_check",
        "_determine_required_frames",
        "_execute_frame",
        "_execute_research_frame",
        "_execute_security_frame",
        "_execute_existence_frame",
        "_execute_generic_frame",
        "_check_consciousness_preservation",
        "_generate_recommendations",
        "_generate_next_steps",
        "get_task_stats",
        "__init__",
        "check_existence",
        "__init__",
        "execute_research",
        "__init__",
        "run_security_audit",
        "__init__",
        "check_existence"
      ],
      "classes": [
        "TaskPriority",
        "TaskCategory",
        "TaskStatus",
        "Task",
        "TaskReport",
        "UniversalTaskOrchestrator",
        "ExistenceCheckFrame",
        "ResearchInformationFrame",
        "SecurityAuditFrame",
        "ExistenceCheckFrame"
      ],
      "dependencies": [
        "json",
        "datetime",
        "os",
        "sys",
        "subprocess",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "enum.Enum",
        "existence_check_frame.ExistenceCheckFrame",
        "importlib.util",
        "importlib.util",
        "importlib.util"
      ]
    },
    "OCTOSPINE\\TECHNICAL\\scaffold-frames\\webhook-endpoint-analyzer-frame.py": {
      "name": "webhook-endpoint-analyzer-frame.py",
      "type": "python_frame",
      "description": "\nWebhook & Endpoint Analyzer Frame\nScans repository for outbound endpoints/webhooks and basic auth token patterns.\n",
      "functions": [
        "_scan_text",
        "_stream_scan_file",
        "run_webhook_endpoint_analyzer"
      ],
      "classes": [],
      "dependencies": [
        "json",
        "os",
        "re",
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List"
      ]
    }
  },
  "processes": {
    "frame_execution": {
      "name": "Frame Execution",
      "description": "Standard frame execution process",
      "steps": [
        "Frame Selection",
        "Dependency Resolution",
        "Execution",
        "Result Processing"
      ],
      "inputs": [
        "task_description",
        "frame_parameters"
      ],
      "outputs": [
        "execution_results",
        "metrics"
      ],
      "dependencies": [
        "frame_intelligence_system",
        "universal_task_orchestrator"
      ]
    },
    "documentation_generation": {
      "name": "Documentation Generation",
      "description": "Automated documentation generation process",
      "steps": [
        "Code Analysis",
        "Content Generation",
        "Indexing",
        "Validation",
        "Publication"
      ],
      "inputs": [
        "source_files",
        "documentation_requirements"
      ],
      "outputs": [
        "documentation_files",
        "indexes"
      ],
      "dependencies": [
        "comprehensive_documentation_frame",
        "code_analysis_tools"
      ]
    }
  },
  "last_updated": "2025-08-13T12:20:10.408132"
}