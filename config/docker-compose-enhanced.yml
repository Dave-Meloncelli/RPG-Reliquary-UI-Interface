version: '3.9'

services:
  # ===== AGENT ZERO CORE SERVICES =====

  # Agent Zero API (FastAPI Backend)
  agent-zero-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - milvus
      - elasticsearch
      - chromadb
      - qdrant
    environment:
      - DATABASE_URL=postgresql://az_user:${POSTGRES_PASSWORD}@postgres:5432/az_interface
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - MILVUS_HOST=milvus
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - CHROMADB_HOST=chromadb
      - QDRANT_HOST=qdrant
      - SECRET_KEY=${SECRET_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - NODE_ENV=${NODE_ENV:-production}
    volumes:
      - agent_zero_data:/app/data
      - agent_zero_logs:/app/logs
      - shared_models:/app/models
    networks:
      - agent_zero_network
      - monitoring_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Agent Zero Frontend (React)
  agent-zero-ui:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    ports:
      - "3000:3000"
    depends_on:
      - agent-zero-api
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - BACKEND_URL=http://agent-zero-api:8000
      - REACT_APP_API_URL=http://agent-zero-api:8000
    volumes:
      - agent_zero_ui_data:/app/dist
      - shared_models:/app/models:ro
    networks:
      - agent_zero_network
      - monitoring_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # ===== OPEN SOURCE ECOSYSTEM SERVICES =====

  # üõçÔ∏è Medusa.js - E-commerce Platform
  medusa:
    build:
      context: ./ecosystem/medusa
      dockerfile: Dockerfile
    ports:
      - "9001:9000"
    depends_on:
      - postgres
      - redis
      - agent-zero-api
    environment:
      - DATABASE_URL=postgresql://az_user:${POSTGRES_PASSWORD}@postgres:5432/medusa
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${MEDUSA_JWT_SECRET}
      - COOKIE_SECRET=${MEDUSA_COOKIE_SECRET}
      - AGENT_ZERO_API_URL=http://agent-zero-api:8000
    volumes:
      - medusa_data:/app/data
      - medusa_uploads:/app/uploads
    networks:
      - agent_zero_network
      - ecosystem_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # üß† Logseq - Knowledge Management
  logseq:
    build:
      context: ./ecosystem/logseq
      dockerfile: Dockerfile
    ports:
      - "12315:12315"
    depends_on:
      - postgres
      - agent-zero-api
    environment:
      - DATABASE_URL=postgresql://az_user:${POSTGRES_PASSWORD}@postgres:5432/logseq
      - AGENT_ZERO_API_URL=http://agent-zero-api:8000
      - LOGSEQ_SECRET_KEY=${LOGSEQ_SECRET_KEY}
    volumes:
      - logseq_data:/app/data
      - logseq_graphs:/app/graphs
    networks:
      - agent_zero_network
      - ecosystem_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:12315/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # üöÄ Rocket.Chat - Communication Platform
  rocketchat:
    image: registry.rocket.chat/rocketchat/rocket.chat:latest
    ports:
      - "3002:3000"
    depends_on:
      - mongodb
      - agent-zero-api
    environment:
      - ROOT_URL=http://localhost:3002
      - MONGO_URL=mongodb://mongodb:27017/rocketchat
      - MONGO_OPLOG_URL=mongodb://mongodb:27017/local
      - AGENT_ZERO_API_URL=http://agent-zero-api:8000
    volumes:
      - rocketchat_data:/app/uploads
    networks:
      - agent_zero_network
      - ecosystem_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/info" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # üéØ SuiteCRM - Customer Relationship Management
  suitecrm:
    image: suitecrm/suitecrm:latest
    ports:
      - "80:80"
    depends_on:
      - mysql
      - agent-zero-api
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_DATABASE=suitecrm
      - MYSQL_USER=suitecrm
      - MYSQL_PASSWORD=${SUITECRM_PASSWORD}
      - AGENT_ZERO_API_URL=http://agent-zero-api:8000
    volumes:
      - suitecrm_data:/var/www/html
    networks:
      - agent_zero_network
      - ecosystem_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/index.php" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ===== AI MEMORY & VECTOR DATABASES =====

  # ChromaDB - Vector Database for AI Memory
  chromadb:
    image: chromadb/chroma:latest
    ports:
      - "8001:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - agent_zero_network
      - ai_memory_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Qdrant - Alternative Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - agent_zero_network
      - ai_memory_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:6333/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # ===== DATABASE SERVICES =====

  # MongoDB for Rocket.Chat
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - mongodb_data:/data/db
    networks:
      - agent_zero_network
      - ecosystem_network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # MySQL for SuiteCRM
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=suitecrm
      - MYSQL_USER=suitecrm
      - MYSQL_PASSWORD=${SUITECRM_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - agent_zero_network
      - ecosystem_network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ===== EXISTING SERVICES (KEPT FOR REFERENCE) =====

  # PostgreSQL Database (Enhanced)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=az_interface
      - POSTGRES_USER=az_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - agent_zero_network
      - monitoring_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U az_user -d az_interface" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - agent_zero_network
      - monitoring_network
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # ===== MONITORING & OBSERVABILITY =====

  # Grafana Dashboards (Enhanced for Ecosystem)
  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - monitoring_network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring_network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  # Agent Zero Data
  agent_zero_data:
  agent_zero_ui_data:
  agent_zero_logs:

  # Ecosystem Data
  medusa_data:
  medusa_uploads:
  logseq_data:
  logseq_graphs:
  rocketchat_data:
  suitecrm_data:

  # AI Memory Data
  chromadb_data:
  qdrant_data:

  # Database Data
  postgres_data:
  redis_data:
  mongodb_data:
  mysql_data:

  # Monitoring Data
  prometheus_data:
  grafana_data:


networks:
  # Agent Zero Network (Core Services)
  agent_zero_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "agent-zero.core=true"

  # Ecosystem Network (Open Source Tools)
  ecosystem_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
    labels:
      - "ecosystem.tools=true"

  # AI Memory Network (Vector Databases)
  ai_memory_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.26.0.0/16
    labels:
      - "ai.memory=true"

  # Monitoring Network (Observability Stack)
  monitoring_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.24.0.0/16
    labels:
      - "monitoring.stack=true"
