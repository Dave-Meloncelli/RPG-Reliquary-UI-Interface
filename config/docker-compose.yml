version: '3.8'

# ===== AZ INTERFACE DOCKER COMPOSE CONFIGURATION =====
# This file orchestrates all services for the AZ Interface platform
# Environment variables are loaded from .env file for security

services:
  # ===== DATABASE SERVICES =====

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: az_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-az_interface}
      POSTGRES_USER: ${POSTGRES_USER:-az_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - agent_zero_network
      - monitoring_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-az_user} -d ${POSTGRES_DB:-az_interface}" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: az_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - agent_zero_network
      - monitoring_network
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ===== AI & MACHINE LEARNING SERVICES =====

  # Ollama (Local LLM)
  ollama:
    image: ollama/ollama:latest
    container_name: az_ollama
    restart: unless-stopped
    environment:
      OLLAMA_HOST: ${OLLAMA_HOST:-http://ollama:11434}
      OLLAMA_MODEL: ${OLLAMA_MODEL:-llama3.2}
    volumes:
      - ollama_data:/root/.ollama
      - shared_models:/app/models
    ports:
      - "11434:11434"
    networks:
      - agent_zero_network
      - monitoring_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:11434/api/tags" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
        devices:
          - driver: nvidia
            count: 1
            capabilities: [ gpu ]

  # ===== BROWSER CONTROLLER SERVICE =====

  # Browser Controller with Playwright
  browser-controller:
    build:
      context: ./services/browser-controller
      dockerfile: Dockerfile
    ports:
      - "${BROWSER_CONTROLLER_PORT:-30006}:30006"
    depends_on:
      - redis
      - ollama
    environment:
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PLAYWRIGHT_BROWSER=${PLAYWRIGHT_BROWSER:-chromium}
      - CAPTCHA_SOLVER_ENABLED=${CAPTCHA_SOLVER_ENABLED:-true}
      - GPU_ACCELERATION=${GPU_ACCELERATION:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - browser_data:/browser-data
      - ./services/browser-controller:/app
      - shared_models:/app/models
    networks:
      - agent_zero_network
      - browser_network
      - monitoring_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:30006/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
        devices:
          - driver: nvidia
            count: 1
            capabilities: [ gpu ]

  # ===== ORCHESTRATION SERVICE =====

  # Multi-Agent Orchestration Service
  orchestration-service:
    build:
      context: ./services/orchestration-service
      dockerfile: Dockerfile
    ports:
      - "${ORCHESTRATION_PORT:-30007}:30007"
    depends_on:
      - redis
      - agent-zero-api
      - crewai-core
      - mcp-server
    environment:
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - AGENT_ZERO_API_URL=http://agent-zero-api:8000
      - CREWAI_CORE_URL=http://crewai-core:8501
      - MCP_SERVER_URL=http://mcp-server:30001
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - orchestration_data:/app/data
      - ./services/orchestration-service:/app
      - shared_models:/app/models
    networks:
      - agent_zero_network
      - crewai_network
      - monitoring_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:30007/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ===== MCP SERVER FOUNDATION =====

  # MCP Server Foundation (5 Core Servers)
  mcp-server:
    build:
      context: ./services/mcp-server
      dockerfile: Dockerfile
    ports:
      - "${MCP_KNOWLEDGE_PORT:-30001}:30001" # Knowledge MCP Server
      - "${MCP_BROWSER_PORT:-30002}:30002" # Browser MCP Server
      - "${MCP_FILESYSTEM_PORT:-30003}:30003" # FileSystem MCP Server
      - "${MCP_DATABASE_PORT:-30004}:30004" # Database MCP Server
      - "${MCP_AUDIT_PORT:-30005}:30005" # Audit MCP Server
    depends_on:
      - redis
      - postgres
      - milvus
      - elasticsearch
      - browser-controller
    environment:
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-az_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-az_interface}
      - MILVUS_HOST=milvus
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - BROWSER_CONTROLLER_URL=http://browser-controller:30006
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - mcp_data:/app/data
      - ./services/mcp-server:/app
      - shared_models:/app/models
    networks:
      - agent_zero_network
      - crewai_network
      - browser_network
      - monitoring_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:30001/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # ===== MONITORING SERVICES =====

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: az_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "${METRICS_PORT:-9090}:9090"
    networks:
      - monitoring_network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: az_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - monitoring_network
    depends_on:
      - prometheus
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===== DEVELOPMENT TOOLS =====

  # Portainer (Container Management)
  portainer:
    image: portainer/portainer-ce:latest
    container_name: az_portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9000:9000"
    networks:
      - monitoring_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/api/status" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Adminer (Database Management)
  adminer:
    image: adminer:latest
    container_name: az_adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "8080:8080"
    networks:
      - agent_zero_network
    depends_on:
      - postgres
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# ===== NETWORKS =====
networks:
  # Agent Zero Network (Core Services)
  agent_zero_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "agent.zero.network=true"

  # CrewAI Network (Multi-Agent Coordination)
  crewai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    labels:
      - "crewai.network=true"

  # Browser Network (Web Automation)
  browser_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
    labels:
      - "browser.automation=true"

  # Monitoring Network (Observability)
  monitoring_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
    labels:
      - "monitoring.network=true"

# ===== VOLUMES =====
volumes:
  # Database Volumes
  postgres_data:
    driver: local
    labels:
      - "az.interface.database=true"

  redis_data:
    driver: local
    labels:
      - "az.interface.cache=true"

  # AI & ML Volumes
  ollama_data:
    driver: local
    labels:
      - "az.interface.ai=true"

  shared_models:
    driver: local
    labels:
      - "az.interface.models=true"

  # Service Volumes
  browser_data:
    driver: local
    labels:
      - "az.interface.browser=true"

  orchestration_data:
    driver: local
    labels:
      - "az.interface.orchestration=true"

  mcp_data:
    driver: local
    labels:
      - "az.interface.mcp=true"

  # Monitoring Volumes
  prometheus_data:
    driver: local
    labels:
      - "az.interface.monitoring=true"

  grafana_data:
    driver: local
    labels:
      - "az.interface.monitoring=true"

  portainer_data:
    driver: local
    labels:
      - "az.interface.admin=true"
