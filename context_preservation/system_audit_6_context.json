{
  "frame_id": "system_audit",
  "stage": 6,
  "input_data": {},
  "parameters": {
    "recursive": true,
    "validate_hub": true
  },
  "result": {
    "success": true,
    "audit_complete": true,
    "hub_validated": true,
    "summary": {
      "totalFiles": 147,
      "templates": 0,
      "endpoints": 0,
      "tools": 0,
      "documentation": 0,
      "connections": 108,
      "dependencies": 110,
      "missing": 1,
      "recommendations": 114
    },
    "context": {
      "input_data": {},
      "parameters": {
        "recursive": true,
        "validate_hub": true
      },
      "previous_results": {
        "stage_1": {
          "stage": 1,
          "stage_name": "SCOPE",
          "frames_executed": 1,
          "successful_frames": 1,
          "failed_frames": 0,
          "results": [
            {
              "frame_id": "synthesis_analysis",
              "frame_name": "Synthesis Analysis",
              "success": true,
              "result": {
                "synthesis_complete": true,
                "synergies_found": false,
                "risks_identified": true,
                "opportunities_found": false,
                "analysis_successful": true,
                "timestamp": "2025-08-10T12:12:18.317166"
              }
            }
          ],
          "stage_failed": false
        },
        "stage_2": {
          "stage": 2,
          "stage_name": "IDENTIFY_ANALYZE",
          "frames_executed": 2,
          "successful_frames": 2,
          "failed_frames": 0,
          "results": [
            {
              "frame_id": "system_audit",
              "frame_name": "System Audit",
              "success": true,
              "result": {
                "success": true,
                "audit_complete": true,
                "hub_validated": true,
                "summary": {
                  "totalFiles": 146,
                  "templates": 0,
                  "endpoints": 0,
                  "tools": 0,
                  "documentation": 0,
                  "connections": 108,
                  "dependencies": 110,
                  "missing": 1,
                  "recommendations": 113
                },
                "context": {
                  "input_data": {},
                  "parameters": {
                    "recursive": true,
                    "validate_hub": true
                  },
                  "previous_results": {
                    "stage_1": {
                      "stage": 1,
                      "stage_name": "SCOPE",
                      "frames_executed": 1,
                      "successful_frames": 1,
                      "failed_frames": 0,
                      "results": [
                        {
                          "frame_id": "synthesis_analysis",
                          "frame_name": "Synthesis Analysis",
                          "success": true,
                          "result": {
                            "synthesis_complete": true,
                            "synergies_found": false,
                            "risks_identified": true,
                            "opportunities_found": false,
                            "analysis_successful": true,
                            "timestamp": "2025-08-10T12:12:18.317166"
                          }
                        }
                      ],
                      "stage_failed": false
                    }
                  },
                  "entry_point": "performFullAudit"
                }
              }
            },
            {
              "frame_id": "risk_mitigation",
              "frame_name": "Risk Mitigation",
              "success": true,
              "result": {
                "analysis_complete": true,
                "critical_risks_mitigated": true,
                "mitigated_risks": 2,
                "action_items_created": 2,
                "results_path": "reports\\risk_mitigation_20250810_121218.json",
                "backlog_path": "backlog\\backlog_items_20250810_121218.json"
              }
            }
          ],
          "stage_failed": false
        },
        "stage_3": {
          "stage": 3,
          "stage_name": "PLAN",
          "frames_executed": 1,
          "successful_frames": 1,
          "failed_frames": 0,
          "results": [
            {
              "frame_id": "pre_existing_systems_discovery",
              "frame_name": "Pre-Existing Systems Discovery",
              "success": true,
              "result": {
                "systems_discovered": true,
                "integration_plan_generated": true,
                "timestamp": "2025-08-10T12:12:18.874366",
                "discovered_systems": {
                  "github_actions": {
                    "count": 11,
                    "workflows": {
                      "analytics.yml": {
                        "path": ".github\\workflows\\analytics.yml",
                        "error": "'charmap' codec can't decode byte 0x9d in position 4611: character maps to <undefined>"
                      },
                      "ci-cd.yml": {
                        "path": ".github\\workflows\\ci-cd.yml",
                        "size": 4110,
                        "triggers": [
                          "on:",
                          "push:",
                          "pull_request:",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'",
                          "deploy-production:",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'",
                          "runs-on: ubuntu-latest"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Run Framework Integration",
                          "- name: Checkout repository",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Type check",
                          "- name: Lint",
                          "- name: Run tests",
                          "- name: Build",
                          "- name: Upload build artifacts",
                          "- name: Checkout repository",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Run Snyk security scan",
                          "- name: Run npm audit",
                          "- name: Checkout repository",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Build",
                          "- name: Start server",
                          "- name: Run Lighthouse CI",
                          "- name: Checkout repository",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Build",
                          "- name: Deploy to staging",
                          "- name: Checkout repository",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Build",
                          "- name: Deploy to production",
                          "- name: Notify failure"
                        ],
                        "audit_related": true
                      },
                      "ci-gate.yml": {
                        "path": ".github\\workflows\\ci-gate.yml",
                        "size": 949,
                        "triggers": [
                          "on:",
                          "pull_request:",
                          "push:",
                          "runs-on: ubuntu-latest",
                          "python-version: '3.11'",
                          "node-version: '20'"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Run Framework Integration",
                          "- name: Install Python deps",
                          "- name: Pytest smoke (health endpoints)",
                          "- name: Run CI Gate (strict)",
                          "- name: Generate remediation plan"
                        ],
                        "audit_related": true
                      },
                      "ci.yml": {
                        "path": ".github\\workflows\\ci.yml",
                        "size": 8143,
                        "triggers": [
                          "on:",
                          "push:",
                          "pull_request:",
                          "runs-on: ubuntu-latest",
                          "runs-on: ubuntu-latest",
                          "node-version: ${{ env.NODE_VERSION }}",
                          "python-version: ${{ env.PYTHON_VERSION }}",
                          "runs-on: ubuntu-latest",
                          "node-version: ${{ env.NODE_VERSION }}",
                          "runs-on: ubuntu-latest",
                          "python-version: ${{ env.PYTHON_VERSION }}",
                          "runs-on: ubuntu-latest",
                          "node-version: ${{ env.NODE_VERSION }}",
                          "python-version: ${{ env.PYTHON_VERSION }}",
                          "runs-on: ubuntu-latest",
                          "node-version: ${{ env.NODE_VERSION }}",
                          "runs-on: ubuntu-latest",
                          "push: true",
                          "push: true",
                          "runs-on: ubuntu-latest",
                          "deploy-production:",
                          "runs-on: ubuntu-latest"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Run Framework Integration",
                          "- name: Checkout code",
                          "- name: Run Trivy vulnerability scanner",
                          "- name: Upload Trivy scan results",
                          "- name: Run Bandit security linter",
                          "- name: Run npm audit",
                          "- name: Checkout code",
                          "- name: Setup Node.js",
                          "- name: Setup Python",
                          "- name: Install dependencies",
                          "- name: Run ESLint",
                          "- name: Run TypeScript type checking",
                          "- name: Run Black (Python code formatting)",
                          "- name: Run isort (Python import sorting)",
                          "- name: Run Flake8 (Python linting)",
                          "- name: Checkout code",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Run frontend tests",
                          "- name: Run frontend tests with coverage",
                          "- name: Upload coverage to Codecov",
                          "- name: Checkout code",
                          "- name: Setup Python",
                          "- name: Install dependencies",
                          "- name: Run backend tests",
                          "- name: Upload coverage to Codecov",
                          "- name: Checkout code",
                          "- name: Setup Node.js",
                          "- name: Setup Python",
                          "- name: Install dependencies",
                          "- name: Start backend server",
                          "- name: Run integration tests",
                          "- name: Checkout code",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Build frontend",
                          "- name: Upload build artifacts",
                          "- name: Checkout code",
                          "- name: Set up Docker Buildx",
                          "- name: Login to Docker Hub",
                          "- name: Build and push backend image",
                          "- name: Build and push frontend image",
                          "- name: Deploy to staging environment",
                          "- name: Deploy to production environment"
                        ],
                        "audit_related": true
                      },
                      "codeql.yml": {
                        "path": ".github\\workflows\\codeql.yml",
                        "size": 1170,
                        "triggers": [
                          "on:",
                          "push:",
                          "pull_request:",
                          "- cron: '30 1 * * 0'",
                          "runs-on: ubuntu-latest"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Run Framework Integration",
                          "- name: Checkout repository",
                          "- name: Initialize CodeQL",
                          "- name: Autobuild",
                          "- name: Perform CodeQL Analysis",
                          "- name: Upload SARIF file"
                        ],
                        "audit_related": true
                      },
                      "dependency-review.yml": {
                        "path": ".github\\workflows\\dependency-review.yml",
                        "size": 594,
                        "triggers": [
                          "on:",
                          "pull_request:",
                          "runs-on: ubuntu-latest"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Run Framework Integration",
                          "- name: Checkout code",
                          "- name: Dependency Review"
                        ],
                        "audit_related": true
                      },
                      "framework-integration.yml": {
                        "path": ".github\\workflows\\framework-integration.yml",
                        "size": 1048,
                        "triggers": [
                          "on:",
                          "push:",
                          "pull_request:",
                          "framework-integration:",
                          "runs-on: ubuntu-latest",
                          "python-version: '3.11'",
                          "node-version: '18'"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Checkout code",
                          "- name: Setup Python",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Run Framework Integration",
                          "- name: Upload Integration Report"
                        ],
                        "audit_related": true
                      },
                      "lint.yml": {
                        "path": ".github\\workflows\\lint.yml",
                        "size": 2755,
                        "triggers": [
                          "on:",
                          "push:",
                          "pull_request:",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'",
                          "python-version: '3.11'"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Checkout",
                          "- name: Setup Node",
                          "- name: Install Node deps",
                          "- name: Run lint (non-blocking)",
                          "- name: Setup Python",
                          "- name: Python env check (non-blocking)",
                          "- name: Validate JSON reports (rigid)",
                          "- name: High-confidence secrets scan (rigid)",
                          "- name: Python dependency audit (rigid)",
                          "- name: Node.js dependency audit (rigid)",
                          "- name: Generate Python SBOM (flexible)",
                          "- name: Generate Node.js SBOM (flexible)",
                          "- name: Upload reports (flexible)"
                        ],
                        "audit_related": true
                      },
                      "post-commit-audit.yml": {
                        "path": ".github\\workflows\\post-commit-audit.yml",
                        "error": "'charmap' codec can't decode byte 0x8d in position 2606: character maps to <undefined>"
                      },
                      "security.yml": {
                        "path": ".github\\workflows\\security.yml",
                        "size": 4268,
                        "triggers": [
                          "on:",
                          "- cron: '0 2 * * 1'",
                          "push:",
                          "pull_request:",
                          "runs-on: ubuntu-latest",
                          "runs-on: ubuntu-latest",
                          "runs-on: ubuntu-latest",
                          "python-version: '3.11'",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'",
                          "runs-on: ubuntu-latest",
                          "runs-on: ubuntu-latest"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Run Framework Integration",
                          "- name: Checkout code",
                          "- name: Initialize CodeQL",
                          "- name: Autobuild",
                          "- name: Perform CodeQL Analysis",
                          "- name: Checkout code",
                          "- name: Run Trivy vulnerability scanner",
                          "- name: Upload Trivy scan results",
                          "- name: Checkout code",
                          "- name: Setup Python",
                          "- name: Install dependencies",
                          "- name: Run Bandit security linter",
                          "- name: Run Safety check",
                          "- name: Upload security reports",
                          "- name: Checkout code",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Run npm audit",
                          "- name: Run Snyk security scan",
                          "- name: Upload security reports",
                          "- name: Checkout code",
                          "- name: Run OWASP Dependency Check",
                          "- name: Upload dependency check report",
                          "- name: Checkout code",
                          "- name: Run TruffleHog"
                        ],
                        "audit_related": true
                      },
                      "sonar.yml": {
                        "path": ".github\\workflows\\sonar.yml",
                        "size": 2036,
                        "triggers": [
                          "on:",
                          "push:",
                          "pull_request:",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Run Framework Integration",
                          "- name: Checkout repository",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Run tests",
                          "- name: Build project",
                          "- name: SonarQube Scan",
                          "- name: Quality Gate Check",
                          "- name: Upload SonarQube results to GitHub"
                        ],
                        "audit_related": true
                      }
                    },
                    "audit_workflows": [
                      {
                        "path": ".github\\workflows\\ci-cd.yml",
                        "size": 4110,
                        "triggers": [
                          "on:",
                          "push:",
                          "pull_request:",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'",
                          "deploy-production:",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'",
                          "runs-on: ubuntu-latest"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Run Framework Integration",
                          "- name: Checkout repository",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Type check",
                          "- name: Lint",
                          "- name: Run tests",
                          "- name: Build",
                          "- name: Upload build artifacts",
                          "- name: Checkout repository",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Run Snyk security scan",
                          "- name: Run npm audit",
                          "- name: Checkout repository",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Build",
                          "- name: Start server",
                          "- name: Run Lighthouse CI",
                          "- name: Checkout repository",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Build",
                          "- name: Deploy to staging",
                          "- name: Checkout repository",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Build",
                          "- name: Deploy to production",
                          "- name: Notify failure"
                        ],
                        "audit_related": true
                      },
                      {
                        "path": ".github\\workflows\\ci-gate.yml",
                        "size": 949,
                        "triggers": [
                          "on:",
                          "pull_request:",
                          "push:",
                          "runs-on: ubuntu-latest",
                          "python-version: '3.11'",
                          "node-version: '20'"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Run Framework Integration",
                          "- name: Install Python deps",
                          "- name: Pytest smoke (health endpoints)",
                          "- name: Run CI Gate (strict)",
                          "- name: Generate remediation plan"
                        ],
                        "audit_related": true
                      },
                      {
                        "path": ".github\\workflows\\ci.yml",
                        "size": 8143,
                        "triggers": [
                          "on:",
                          "push:",
                          "pull_request:",
                          "runs-on: ubuntu-latest",
                          "runs-on: ubuntu-latest",
                          "node-version: ${{ env.NODE_VERSION }}",
                          "python-version: ${{ env.PYTHON_VERSION }}",
                          "runs-on: ubuntu-latest",
                          "node-version: ${{ env.NODE_VERSION }}",
                          "runs-on: ubuntu-latest",
                          "python-version: ${{ env.PYTHON_VERSION }}",
                          "runs-on: ubuntu-latest",
                          "node-version: ${{ env.NODE_VERSION }}",
                          "python-version: ${{ env.PYTHON_VERSION }}",
                          "runs-on: ubuntu-latest",
                          "node-version: ${{ env.NODE_VERSION }}",
                          "runs-on: ubuntu-latest",
                          "push: true",
                          "push: true",
                          "runs-on: ubuntu-latest",
                          "deploy-production:",
                          "runs-on: ubuntu-latest"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Run Framework Integration",
                          "- name: Checkout code",
                          "- name: Run Trivy vulnerability scanner",
                          "- name: Upload Trivy scan results",
                          "- name: Run Bandit security linter",
                          "- name: Run npm audit",
                          "- name: Checkout code",
                          "- name: Setup Node.js",
                          "- name: Setup Python",
                          "- name: Install dependencies",
                          "- name: Run ESLint",
                          "- name: Run TypeScript type checking",
                          "- name: Run Black (Python code formatting)",
                          "- name: Run isort (Python import sorting)",
                          "- name: Run Flake8 (Python linting)",
                          "- name: Checkout code",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Run frontend tests",
                          "- name: Run frontend tests with coverage",
                          "- name: Upload coverage to Codecov",
                          "- name: Checkout code",
                          "- name: Setup Python",
                          "- name: Install dependencies",
                          "- name: Run backend tests",
                          "- name: Upload coverage to Codecov",
                          "- name: Checkout code",
                          "- name: Setup Node.js",
                          "- name: Setup Python",
                          "- name: Install dependencies",
                          "- name: Start backend server",
                          "- name: Run integration tests",
                          "- name: Checkout code",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Build frontend",
                          "- name: Upload build artifacts",
                          "- name: Checkout code",
                          "- name: Set up Docker Buildx",
                          "- name: Login to Docker Hub",
                          "- name: Build and push backend image",
                          "- name: Build and push frontend image",
                          "- name: Deploy to staging environment",
                          "- name: Deploy to production environment"
                        ],
                        "audit_related": true
                      },
                      {
                        "path": ".github\\workflows\\codeql.yml",
                        "size": 1170,
                        "triggers": [
                          "on:",
                          "push:",
                          "pull_request:",
                          "- cron: '30 1 * * 0'",
                          "runs-on: ubuntu-latest"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Run Framework Integration",
                          "- name: Checkout repository",
                          "- name: Initialize CodeQL",
                          "- name: Autobuild",
                          "- name: Perform CodeQL Analysis",
                          "- name: Upload SARIF file"
                        ],
                        "audit_related": true
                      },
                      {
                        "path": ".github\\workflows\\dependency-review.yml",
                        "size": 594,
                        "triggers": [
                          "on:",
                          "pull_request:",
                          "runs-on: ubuntu-latest"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Run Framework Integration",
                          "- name: Checkout code",
                          "- name: Dependency Review"
                        ],
                        "audit_related": true
                      },
                      {
                        "path": ".github\\workflows\\framework-integration.yml",
                        "size": 1048,
                        "triggers": [
                          "on:",
                          "push:",
                          "pull_request:",
                          "framework-integration:",
                          "runs-on: ubuntu-latest",
                          "python-version: '3.11'",
                          "node-version: '18'"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Checkout code",
                          "- name: Setup Python",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Run Framework Integration",
                          "- name: Upload Integration Report"
                        ],
                        "audit_related": true
                      },
                      {
                        "path": ".github\\workflows\\lint.yml",
                        "size": 2755,
                        "triggers": [
                          "on:",
                          "push:",
                          "pull_request:",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'",
                          "python-version: '3.11'"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Checkout",
                          "- name: Setup Node",
                          "- name: Install Node deps",
                          "- name: Run lint (non-blocking)",
                          "- name: Setup Python",
                          "- name: Python env check (non-blocking)",
                          "- name: Validate JSON reports (rigid)",
                          "- name: High-confidence secrets scan (rigid)",
                          "- name: Python dependency audit (rigid)",
                          "- name: Node.js dependency audit (rigid)",
                          "- name: Generate Python SBOM (flexible)",
                          "- name: Generate Node.js SBOM (flexible)",
                          "- name: Upload reports (flexible)"
                        ],
                        "audit_related": true
                      },
                      {
                        "path": ".github\\workflows\\security.yml",
                        "size": 4268,
                        "triggers": [
                          "on:",
                          "- cron: '0 2 * * 1'",
                          "push:",
                          "pull_request:",
                          "runs-on: ubuntu-latest",
                          "runs-on: ubuntu-latest",
                          "runs-on: ubuntu-latest",
                          "python-version: '3.11'",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'",
                          "runs-on: ubuntu-latest",
                          "runs-on: ubuntu-latest"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Run Framework Integration",
                          "- name: Checkout code",
                          "- name: Initialize CodeQL",
                          "- name: Autobuild",
                          "- name: Perform CodeQL Analysis",
                          "- name: Checkout code",
                          "- name: Run Trivy vulnerability scanner",
                          "- name: Upload Trivy scan results",
                          "- name: Checkout code",
                          "- name: Setup Python",
                          "- name: Install dependencies",
                          "- name: Run Bandit security linter",
                          "- name: Run Safety check",
                          "- name: Upload security reports",
                          "- name: Checkout code",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Run npm audit",
                          "- name: Run Snyk security scan",
                          "- name: Upload security reports",
                          "- name: Checkout code",
                          "- name: Run OWASP Dependency Check",
                          "- name: Upload dependency check report",
                          "- name: Checkout code",
                          "- name: Run TruffleHog"
                        ],
                        "audit_related": true
                      },
                      {
                        "path": ".github\\workflows\\sonar.yml",
                        "size": 2036,
                        "triggers": [
                          "on:",
                          "push:",
                          "pull_request:",
                          "runs-on: ubuntu-latest",
                          "node-version: '18'"
                        ],
                        "jobs": [
                          "jobs:",
                          "- name: Run Framework Integration",
                          "- name: Checkout repository",
                          "- name: Setup Node.js",
                          "- name: Install dependencies",
                          "- name: Run tests",
                          "- name: Build project",
                          "- name: SonarQube Scan",
                          "- name: Quality Gate Check",
                          "- name: Upload SonarQube results to GitHub"
                        ],
                        "audit_related": true
                      }
                    ]
                  },
                  "git_hooks": {
                    "count": 5,
                    "hooks": {
                      "commit-msg": {
                        "path": ".husky\\commit-msg",
                        "size": 48,
                        "content": "#!/usr/bin/env sh\n\nnpx commitlint --edit \"$1\"",
                        "audit_related": true
                      },
                      "pre-commit": {
                        "path": ".husky\\pre-commit",
                        "size": 217,
                        "content": "#!/usr/bin/env sh\n\nnpx lint-staged\n\n# Framework validation\necho \"Running framework validation...\"\nnode scripts/framework-validation.js\nif [ $? -ne 0 ]; then\n  echo \"Framework validation failed\"\n  exit 1\nfi",
                        "audit_related": true
                      },
                      "pre-commit.backup.1754649119": {
                        "path": ".husky\\pre-commit.backup.1754649119",
                        "size": 16,
                        "content": "npx lint-staged",
                        "audit_related": true
                      },
                      "pre-push": {
                        "path": ".husky\\pre-push",
                        "error": "'charmap' codec can't decode byte 0x9d in position 152: character maps to <undefined>"
                      },
                      "pre-commit-config": {
                        "path": "config\\pre-commit-config.json",
                        "config": {
                          "hooks": {
                            "pre-commit": "lint-staged",
                            "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
                          },
                          "lint-staged": {
                            "*.{ts,tsx}": [
                              "eslint --fix",
                              "prettier --write",
                              "npm run type-check",
                              "node scripts/validate-imports.js",
                              "node scripts/validate-architecture.js",
                              "node scripts/validate-app-registry.js",
                              "git add"
                            ],
                            "*.md": [
                              "node scripts/validate-doc-links.js"
                            ],
                            "package.json": [
                              "node scripts/validate-dependencies.js"
                            ]
                          }
                        },
                        "audit_related": true
                      }
                    },
                    "audit_hooks": [
                      {
                        "path": ".husky\\commit-msg",
                        "size": 48,
                        "content": "#!/usr/bin/env sh\n\nnpx commitlint --edit \"$1\"",
                        "audit_related": true
                      },
                      {
                        "path": ".husky\\pre-commit",
                        "size": 217,
                        "content": "#!/usr/bin/env sh\n\nnpx lint-staged\n\n# Framework validation\necho \"Running framework validation...\"\nnode scripts/framework-validation.js\nif [ $? -ne 0 ]; then\n  echo \"Framework validation failed\"\n  exit 1\nfi",
                        "audit_related": true
                      },
                      {
                        "path": ".husky\\pre-commit.backup.1754649119",
                        "size": 16,
                        "content": "npx lint-staged",
                        "audit_related": true
                      },
                      {
                        "path": "config\\pre-commit-config.json",
                        "config": {
                          "hooks": {
                            "pre-commit": "lint-staged",
                            "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
                          },
                          "lint-staged": {
                            "*.{ts,tsx}": [
                              "eslint --fix",
                              "prettier --write",
                              "npm run type-check",
                              "node scripts/validate-imports.js",
                              "node scripts/validate-architecture.js",
                              "node scripts/validate-app-registry.js",
                              "git add"
                            ],
                            "*.md": [
                              "node scripts/validate-doc-links.js"
                            ],
                            "package.json": [
                              "node scripts/validate-dependencies.js"
                            ]
                          }
                        },
                        "audit_related": true
                      }
                    ]
                  },
                  "audit_scripts": {
                    "count": 1,
                    "scripts": {
                      "comprehensive-audit.js": {
                        "path": "scripts\\comprehensive-audit.js",
                        "error": "'charmap' codec can't decode byte 0x9d in position 564: character maps to <undefined>"
                      }
                    },
                    "by_type": {
                      "unknown": [
                        "comprehensive-audit.js"
                      ]
                    }
                  },
                  "package_scripts": {
                    "count": 2,
                    "packages": {
                      "package.json": {
                        "path": "package.json",
                        "all_scripts": {
                          "ci:gate": "node scripts/ci-gate.js",
                          "remediate": "node scripts/remediation.js",
                          "prepare": "husky install",
                          "lint": "echo skip",
                          "format": "echo skip",
                          "typecheck": "echo skip",
                          "test": "echo skip"
                        },
                        "audit_scripts": {},
                        "audit_script_count": 0
                      },
                      "backend/package.json": {
                        "path": "backend/package.json",
                        "all_scripts": {
                          "start": "node server.js",
                          "dev": "nodemon server.js",
                          "test": "echo \"Error: no test specified\" && exit 1"
                        },
                        "audit_scripts": {},
                        "audit_script_count": 0
                      }
                    },
                    "total_audit_scripts": 0
                  },
                  "config_files": {
                    "count": 0,
                    "files": {},
                    "audit_configs": []
                  }
                },
                "integration_opportunities": [
                  {
                    "type": "github_actions_integration",
                    "description": "Integrate framework with existing GitHub Actions audit workflows",
                    "priority": "high",
                    "effort": "medium",
                    "benefits": [
                      "Leverage existing CI/CD pipeline",
                      "Avoid duplication",
                      "Unified reporting"
                    ]
                  },
                  {
                    "type": "git_hooks_integration",
                    "description": "Integrate framework with existing Git hooks for pre-commit audits",
                    "priority": "high",
                    "effort": "low",
                    "benefits": [
                      "Automated pre-commit validation",
                      "Consistent audit execution",
                      "Early error detection"
                    ]
                  },
                  {
                    "type": "audit_scripts_integration",
                    "description": "Integrate existing audit scripts as framework frames",
                    "priority": "medium",
                    "effort": "medium",
                    "benefits": [
                      "Reuse proven audit logic",
                      "Maintain existing workflows",
                      "Extend functionality"
                    ]
                  }
                ],
                "duplication_risks": [
                  {
                    "type": "overlapping_automation",
                    "description": "Framework may duplicate existing GitHub Actions audit workflows",
                    "severity": "high",
                    "impact": "Conflicting automation, resource waste, confusion"
                  }
                ],
                "recommendations": [
                  {
                    "type": "integration_over_replacement",
                    "priority": "high",
                    "description": "Integrate with existing GitHub Actions rather than creating parallel systems",
                    "rationale": "Existing CI/CD pipeline already established"
                  }
                ],
                "integration_plan": {
                  "immediate_actions": [
                    {
                      "action": "Review and resolve duplication risks",
                      "priority": "critical",
                      "description": "Address overlapping functionality before proceeding"
                    }
                  ],
                  "short_term_actions": [
                    {
                      "action": "Implement github_actions_integration",
                      "priority": "high",
                      "effort": "medium",
                      "description": "Integrate framework with existing GitHub Actions audit workflows"
                    },
                    {
                      "action": "Implement git_hooks_integration",
                      "priority": "high",
                      "effort": "low",
                      "description": "Integrate framework with existing Git hooks for pre-commit audits"
                    }
                  ],
                  "long_term_actions": [],
                  "integration_points": [
                    {
                      "system": "GitHub Actions",
                      "integration_type": "workflow_trigger",
                      "description": "Trigger framework execution from existing GitHub Actions",
                      "implementation": "Add framework execution step to existing workflows"
                    },
                    {
                      "system": "Git Hooks",
                      "integration_type": "pre_commit_integration",
                      "description": "Integrate framework with pre-commit hooks",
                      "implementation": "Add framework validation to pre-commit hooks"
                    }
                  ]
                }
              }
            }
          ],
          "stage_failed": false
        },
        "stage_4": {
          "stage": 4,
          "stage_name": "IMPLEMENT",
          "frames_executed": 4,
          "successful_frames": 2,
          "failed_frames": 2,
          "results": [
            {
              "frame_id": "real_time_monitoring_dashboard",
              "frame_name": "Real-Time Monitoring Dashboard",
              "success": true,
              "result": {
                "success": true,
                "dashboard_created": true,
                "monitoring_active": true,
                "report_file": "reports\\real_time_monitoring_dashboard_1754799149.json",
                "summary": {
                  "total_agents": 36,
                  "running_agents": 26,
                  "agent_uptime_percent": 72.22222222222221,
                  "total_workflows": 5,
                  "active_workflows": 5,
                  "workflow_activity_percent": 100,
                  "current_cpu_percent": 9.9,
                  "current_memory_percent": 35.7,
                  "current_disk_percent": 80.54989374088193,
                  "active_alerts": 0
                }
              }
            },
            {
              "frame_id": "cross_agent_communication_protocol",
              "frame_name": "Cross-Agent Communication Protocol",
              "success": false,
              "error": "Object of type MessageType is not JSON serializable"
            },
            {
              "frame_id": "resource_allocation_engine",
              "frame_name": "Resource Allocation Engine",
              "success": false,
              "error": "unexpected indent (scripts/frames/resource-allocation-engine-frame.py, line 517)"
            },
            {
              "frame_id": "risk_mitigation",
              "frame_name": "Risk Mitigation",
              "success": true,
              "result": {
                "analysis_complete": true,
                "critical_risks_mitigated": true,
                "mitigated_risks": 2,
                "action_items_created": 2,
                "results_path": "reports\\risk_mitigation_20250810_121241.json",
                "backlog_path": "backlog\\backlog_items_20250810_121241.json"
              }
            }
          ],
          "stage_failed": false
        },
        "stage_5": {
          "status": "no_frames",
          "message": "No frames defined for stage 5"
        }
      },
      "entry_point": "performFullAudit"
    }
  },
  "timestamp": "2025-08-10T12:12:42.151959"
}