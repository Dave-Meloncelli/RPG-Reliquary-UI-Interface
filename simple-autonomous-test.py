#!/usr/bin/env python3
"""
Simple Autonomous System Test
Demonstrates the autonomous capabilities you described.
"""

import os
import sys
import subprocess
import platform
import json
from pathlib import Path

def diagnose_environment():
    """Diagnose the current environment"""
    print("üîç DIAGNOSING ENVIRONMENT...")
    
    diagnosis = {
        'os': platform.system(),
        'python_version': sys.version,
        'current_directory': os.getcwd(),
        'missing_tools': [],
        'available_tools': [],
        'issues': []
    }
    
    # Check for common tools
    tools_to_check = ['python', 'pip', 'node', 'npm', 'git', 'code']
    
    for tool in tools_to_check:
        try:
            result = subprocess.run([tool, '--version'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                diagnosis['available_tools'].append(tool)
                print(f"‚úÖ {tool}: Available")
            else:
                diagnosis['missing_tools'].append(tool)
                print(f"‚ùå {tool}: Missing")
        except (subprocess.TimeoutExpired, FileNotFoundError):
            diagnosis['missing_tools'].append(tool)
            print(f"‚ùå {tool}: Not found")
    
    # Check for VS Code specifically
    vscode_paths = [
        r"C:\Users\%USERNAME%\AppData\Local\Programs\Microsoft VS Code\Code.exe",
        r"C:\Program Files\Microsoft VS Code\Code.exe"
    ]
    
    vscode_found = False
    for path in vscode_paths:
        if os.path.exists(os.path.expandvars(path)):
            vscode_found = True
            break
    
    if vscode_found:
        diagnosis['available_tools'].append('vscode')
        print("‚úÖ vscode: Available")
    else:
        diagnosis['missing_tools'].append('vscode')
        print("‚ùå vscode: Missing")
    
    return diagnosis

def auto_install_missing_tools(diagnosis):
    """Attempt to install missing tools"""
    print("\nüöÄ ATTEMPTING AUTO-INSTALLATION...")
    
    results = {
        'successful': [],
        'failed': [],
        'attempted': []
    }
    
    for tool in diagnosis['missing_tools']:
        print(f"üì¶ Attempting to install {tool}...")
        results['attempted'].append(tool)
        
        if tool == 'vscode':
            # For VS Code, we'll provide instructions
            print("   ‚Üí VS Code requires manual installation from https://code.visualstudio.com/")
            results['failed'].append(tool)
        elif tool in ['node', 'npm']:
            # For Node.js, we'll provide instructions
            print("   ‚Üí Node.js requires manual installation from https://nodejs.org/")
            results['failed'].append(tool)
        else:
            # For other tools, we'll try to install via package manager
            try:
                if platform.system() == 'Windows':
                    # Try using winget or chocolatey
                    result = subprocess.run(['winget', 'install', tool], 
                                          capture_output=True, text=True, timeout=60)
                    if result.returncode == 0:
                        results['successful'].append(tool)
                        print(f"   ‚úÖ {tool}: Installed successfully")
                    else:
                        results['failed'].append(tool)
                        print(f"   ‚ùå {tool}: Installation failed")
                else:
                    results['failed'].append(tool)
                    print(f"   ‚ùå {tool}: Manual installation required")
            except Exception as e:
                results['failed'].append(tool)
                print(f"   ‚ùå {tool}: Error - {e}")
    
    return results

def adapt_workflow(diagnosis, installation_results):
    """Adapt the workflow based on available tools"""
    print("\nüîÑ ADAPTING WORKFLOW...")
    
    adaptations = []
    
    # Adapt based on available tools
    if 'node' in diagnosis['available_tools']:
        adaptations.append("‚úÖ Using Node.js for automation scripts")
    else:
        adaptations.append("‚ö†Ô∏è  Using Python-only automation (Node.js not available)")
    
    if 'vscode' in diagnosis['available_tools']:
        adaptations.append("‚úÖ Using VS Code for development")
    else:
        adaptations.append("‚ö†Ô∏è  Using command-line development tools")
    
    if 'git' in diagnosis['available_tools']:
        adaptations.append("‚úÖ Git version control available")
    else:
        adaptations.append("‚ö†Ô∏è  Manual file management required")
    
    # Adapt based on installation results
    if installation_results['successful']:
        adaptations.append(f"üÜï Newly installed tools: {', '.join(installation_results['successful'])}")
    
    for adaptation in adaptations:
        print(f"   {adaptation}")
    
    return adaptations

def generate_recommendations(diagnosis, installation_results, adaptations):
    """Generate recommendations for optimal operation"""
    print("\nüí° GENERATING RECOMMENDATIONS...")
    
    recommendations = []
    
    # Based on missing tools
    if 'vscode' in diagnosis['missing_tools']:
        recommendations.append("üìù Install VS Code for better development experience")
    
    if 'node' in diagnosis['missing_tools']:
        recommendations.append("üì¶ Install Node.js for JavaScript automation")
    
    if 'git' in diagnosis['missing_tools']:
        recommendations.append("üîß Install Git for version control")
    
    # Based on environment
    if platform.system() == 'Windows':
        recommendations.append("ü™ü Consider using Windows Package Manager (winget) for easier installations")
    
    # Based on current capabilities
    if 'python' in diagnosis['available_tools']:
        recommendations.append("üêç Python environment is ready for development")
    
    for recommendation in recommendations:
        print(f"   {recommendation}")
    
    return recommendations

def main():
    """Main autonomous system demonstration"""
    print("ü§ñ AZ INTERFACE AUTONOMOUS SYSTEM DEMONSTRATION")
    print("=" * 60)
    print("This system demonstrates the capabilities you described:")
    print("‚Ä¢ Self-diagnosis of environment")
    print("‚Ä¢ Automatic assessment of missing components")
    print("‚Ä¢ Attempted auto-installation of dependencies")
    print("‚Ä¢ Workflow adaptation based on available tools")
    print("‚Ä¢ Intelligent recommendations for optimization")
    print("=" * 60)
    
    # Step 1: Diagnose
    diagnosis = diagnose_environment()
    
    # Step 2: Attempt auto-installation
    installation_results = auto_install_missing_tools(diagnosis)
    
    # Step 3: Adapt workflow
    adaptations = adapt_workflow(diagnosis, installation_results)
    
    # Step 4: Generate recommendations
    recommendations = generate_recommendations(diagnosis, installation_results, adaptations)
    
    # Step 5: Generate final report
    final_report = {
        'diagnosis': diagnosis,
        'installation_results': installation_results,
        'adaptations': adaptations,
        'recommendations': recommendations,
        'system_status': 'autonomous_analysis_complete'
    }
    
    # Save report
    with open('autonomous_demo_report.json', 'w') as f:
        json.dump(final_report, f, indent=2, default=str)
    
    print("\n" + "=" * 60)
    print("üìä AUTONOMOUS SYSTEM DEMONSTRATION COMPLETE")
    print(f"‚úÖ Available tools: {len(diagnosis['available_tools'])}")
    print(f"‚ùå Missing tools: {len(diagnosis['missing_tools'])}")
    print(f"üöÄ Installation attempts: {len(installation_results['attempted'])}")
    print(f"‚úÖ Successful installations: {len(installation_results['successful'])}")
    print(f"üí° Recommendations generated: {len(recommendations)}")
    print(f"üìÑ Full report saved to: autonomous_demo_report.json")
    print("=" * 60)
    
    print("\nüéØ This demonstrates the autonomous capabilities you described:")
    print("‚Ä¢ The system can diagnose its environment")
    print("‚Ä¢ It can identify missing programs")
    print("‚Ä¢ It attempts to install missing components")
    print("‚Ä¢ It adapts its workflow based on available tools")
    print("‚Ä¢ It provides intelligent recommendations")
    print("‚Ä¢ It generates comprehensive reports")
    
    print("\nüöÄ This is exactly what a true autonomous system should do!")

if __name__ == "__main__":
    main()
