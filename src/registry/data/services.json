{
  "index": {
    "name": "index",
    "path": "src\\constants\\index.ts",
    "dependencies": [],
    "api": [],
    "methods": [],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.646Z",
    "status": "active"
  },
  "agentBaseData": {
    "name": "agentBaseData",
    "path": "src\\data\\agentBaseData.ts",
    "dependencies": [],
    "api": [],
    "methods": [],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.648Z",
    "status": "active"
  },
  "BaseData": {
    "name": "BaseData",
    "path": "src\\data\\BaseData.ts",
    "dependencies": [],
    "api": [],
    "methods": [],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.648Z",
    "status": "active"
  },
  "fileSystemData": {
    "name": "fileSystemData",
    "path": "src\\data\\fileSystemData.ts",
    "dependencies": [
      "react",
      "react-dom/client",
      "./components/App",
      "react",
      "./Desktop",
      "./Dock",
      "vite",
      "@vitejs/plugin-react"
    ],
    "api": [],
    "methods": [
      "createRoot",
      "getElementById",
      "return",
      "defineConfig",
      "react"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.648Z",
    "status": "active"
  },
  "LoreData": {
    "name": "LoreData",
    "path": "src\\data\\LoreData.ts",
    "dependencies": [],
    "api": [],
    "methods": [],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.649Z",
    "status": "active"
  },
  "personaFiles": {
    "name": "personaFiles",
    "path": "src\\data\\personaLoreData.ts",
    "dependencies": [],
    "api": [],
    "methods": [],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.649Z",
    "status": "active"
  },
  "ComponentRegistry": {
    "name": "ComponentRegistry",
    "path": "src\\registry\\ComponentRegistry.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "Map",
      "register",
      "set",
      "get",
      "get",
      "getAll",
      "from",
      "values",
      "getActive",
      "getAll",
      "filter",
      "getByPath",
      "getAll",
      "find",
      "getDependencies",
      "getDependents",
      "getAll",
      "filter",
      "includes",
      "map",
      "getIntegrationPoints",
      "updateStatus",
      "if",
      "Date",
      "remove",
      "delete",
      "clear",
      "clear",
      "validate",
      "if",
      "push",
      "join",
      "for",
      "getAll",
      "for",
      "if",
      "has",
      "isExternalDependency",
      "push",
      "for",
      "getAll",
      "if",
      "if",
      "push",
      "join",
      "isExternalDependency",
      "external",
      "some",
      "startsWith",
      "toJSON",
      "for",
      "fromJSON",
      "clear",
      "for",
      "entries",
      "Date",
      "set",
      "ComponentRegistry"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.650Z",
    "status": "active"
  },
  "IntegrationRegistry": {
    "name": "IntegrationRegistry",
    "path": "src\\registry\\IntegrationRegistry.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "Map",
      "register",
      "set",
      "get",
      "get",
      "getAll",
      "from",
      "values",
      "getActive",
      "getAll",
      "filter",
      "getByType",
      "getAll",
      "filter",
      "getBySource",
      "getAll",
      "filter",
      "getByTarget",
      "getAll",
      "filter",
      "getByComponent",
      "getAll",
      "filter",
      "getByService",
      "getAll",
      "filter",
      "updateStatus",
      "if",
      "Date",
      "updatePerformance",
      "if",
      "Date",
      "remove",
      "delete",
      "clear",
      "clear",
      "validate",
      "if",
      "push",
      "join",
      "if",
      "push",
      "join",
      "for",
      "getAll",
      "if",
      "push",
      "for",
      "getAll",
      "if",
      "if",
      "push",
      "if",
      "push",
      "detectCircularDependencies",
      "if",
      "has",
      "push",
      "join",
      "if",
      "has",
      "add",
      "add",
      "if",
      "for",
      "if",
      "dfs",
      "delete",
      "for",
      "getAll",
      "if",
      "has",
      "dfs",
      "getDependencyGraph",
      "for",
      "getAll",
      "if",
      "push",
      "getReverseDependencyGraph",
      "for",
      "getAll",
      "if",
      "push",
      "toJSON",
      "for",
      "fromJSON",
      "clear",
      "for",
      "entries",
      "Date",
      "if",
      "Date",
      "set",
      "IntegrationRegistry"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.654Z",
    "status": "active"
  },
  "PersonaRegistry": {
    "name": "PersonaRegistry",
    "path": "src\\registry\\PersonaRegistry.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "Map",
      "register",
      "set",
      "get",
      "get",
      "getAll",
      "from",
      "values",
      "getActive",
      "getAll",
      "filter",
      "getByType",
      "getAll",
      "filter",
      "getByWatcherClass",
      "getAll",
      "filter",
      "getByCapability",
      "getAll",
      "filter",
      "some",
      "getConnectedPersonas",
      "if",
      "getAll",
      "filter",
      "includes",
      "includes",
      "getDependencies",
      "getDependents",
      "getAll",
      "filter",
      "includes",
      "map",
      "getIntegrations",
      "updateStatus",
      "if",
      "Date",
      "addCapability",
      "if",
      "push",
      "Date",
      "addIntegration",
      "if",
      "push",
      "Date",
      "remove",
      "delete",
      "clear",
      "clear",
      "validate",
      "if",
      "push",
      "join",
      "for",
      "getAll",
      "for",
      "if",
      "has",
      "push",
      "for",
      "getAll",
      "if",
      "if",
      "push",
      "join",
      "for",
      "getAll",
      "for",
      "if",
      "has",
      "push",
      "getPersonaNetwork",
      "for",
      "getAll",
      "getCapabilityMatrix",
      "for",
      "getAll",
      "for",
      "if",
      "push",
      "toJSON",
      "for",
      "fromJSON",
      "clear",
      "for",
      "entries",
      "Date",
      "set",
      "PersonaRegistry"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.654Z",
    "status": "active"
  },
  "ServiceRegistry": {
    "name": "ServiceRegistry",
    "path": "src\\registry\\ServiceRegistry.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "Map",
      "register",
      "set",
      "get",
      "get",
      "getAll",
      "from",
      "values",
      "getActive",
      "getAll",
      "filter",
      "getByPath",
      "getAll",
      "find",
      "getByType",
      "getAll",
      "filter",
      "getDependencies",
      "getDependents",
      "getAll",
      "filter",
      "includes",
      "map",
      "getIntegrationPoints",
      "getApiEndpoints",
      "updateStatus",
      "if",
      "Date",
      "addApiEndpoint",
      "if",
      "push",
      "Date",
      "remove",
      "delete",
      "clear",
      "clear",
      "validate",
      "if",
      "push",
      "join",
      "for",
      "getAll",
      "for",
      "if",
      "has",
      "isExternalDependency",
      "push",
      "for",
      "getAll",
      "if",
      "if",
      "push",
      "join",
      "for",
      "getAll",
      "if",
      "push",
      "join",
      "isExternalDependency",
      "external",
      "some",
      "startsWith",
      "toJSON",
      "for",
      "fromJSON",
      "clear",
      "for",
      "entries",
      "Date",
      "set",
      "ServiceRegistry"
    ],
    "type": "third-party",
    "lastUpdated": "2025-08-05T22:22:18.654Z",
    "status": "active"
  },
  "TechStackRegistry": {
    "name": "TechStackRegistry",
    "path": "src\\registry\\TechStackRegistry.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "Map",
      "register",
      "set",
      "get",
      "get",
      "getAll",
      "from",
      "values",
      "getActive",
      "getAll",
      "filter",
      "getByCategory",
      "getAll",
      "filter",
      "getByPriority",
      "getAll",
      "filter",
      "getDependencies",
      "getDependents",
      "getAll",
      "filter",
      "includes",
      "map",
      "getConflicts",
      "updateStatus",
      "if",
      "Date",
      "updateVersion",
      "if",
      "Date",
      "addConflict",
      "if",
      "includes",
      "push",
      "Date",
      "remove",
      "delete",
      "clear",
      "clear",
      "validate",
      "if",
      "push",
      "join",
      "for",
      "getAll",
      "for",
      "if",
      "has",
      "push",
      "for",
      "getAll",
      "for",
      "if",
      "has",
      "if",
      "push",
      "determineConflictSeverity",
      "for",
      "getAll",
      "if",
      "if",
      "push",
      "join",
      "for",
      "getAll",
      "if",
      "push",
      "determineConflictSeverity",
      "if",
      "if",
      "if",
      "getDependencyGraph",
      "for",
      "getAll",
      "getCategorySummary",
      "for",
      "getAll",
      "if",
      "getSecurityReport",
      "for",
      "getAll",
      "if",
      "if",
      "push",
      "if",
      "push",
      "toJSON",
      "for",
      "fromJSON",
      "clear",
      "for",
      "entries",
      "Date",
      "if",
      "Date",
      "set",
      "TechStackRegistry"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.655Z",
    "status": "active"
  },
  "acquisitionService": {
    "name": "acquisitionService",
    "path": "src\\services\\acquisitionService.ts",
    "dependencies": [
      "@google/genai",
      "./personaService",
      "./taskQueueService",
      "../../schemas/acquisitionSchema"
    ],
    "api": [],
    "methods": [
      "if",
      "Error",
      "terms",
      "substring",
      "indexOf",
      "indexOf",
      "substring",
      "indexOf",
      "runAcquisitionPipeline",
      "map",
      "for",
      "if",
      "delay",
      "if",
      "generateContent",
      "getPart",
      "getPart",
      "acquiredBookDataSchema",
      "if",
      "error",
      "addTask",
      "now",
      "Error",
      "if",
      "if",
      "Error",
      "headings",
      "paragraphs",
      "lists",
      "stringify",
      "toFixed",
      "generateContent",
      "generateContent",
      "if",
      "if",
      "parseFloat",
      "if",
      "detected",
      "toFixed",
      "splice",
      "addTask",
      "now",
      "toFixed",
      "delay",
      "catch"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.658Z",
    "status": "active"
  },
  "personaData": {
    "name": "personaData",
    "path": "src\\services\\agentData.ts",
    "dependencies": [
      "../components/icons"
    ],
    "api": [],
    "methods": [
      "for",
      "if",
      "startsWith",
      "startsWith",
      "split",
      "trim",
      "if",
      "startsWith",
      "startsWith",
      "split",
      "trim",
      "if",
      "startsWith",
      "startsWith",
      "split",
      "trim",
      "parseLore",
      "parseLore",
      "parseLore",
      "parseLore",
      "parseLore",
      "parseLore",
      "parseLore",
      "parseLore",
      "parseLore",
      "parseLore",
      "parseLore",
      "parseLore",
      "parseLore",
      "parseLore",
      "parseLore",
      "parseLore",
      "map"
    ],
    "type": "third-party",
    "lastUpdated": "2025-08-05T22:22:18.661Z",
    "status": "active"
  },
  "simulateAgentUpdates": {
    "name": "simulateAgentUpdates",
    "path": "src\\services\\agentNetworkService.ts",
    "dependencies": [
      "./controlPanelService"
    ],
    "api": [],
    "methods": [
      "getState",
      "map",
      "if",
      "if",
      "random",
      "filter",
      "if",
      "random",
      "random",
      "if",
      "random",
      "if",
      "random"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.661Z",
    "status": "active"
  },
  "APIBuildAgentService": {
    "name": "APIBuildAgentService",
    "path": "src\\services\\apiBuildAgentService.ts",
    "dependencies": [
      "./eventBus"
    ],
    "api": [],
    "methods": [
      "Map",
      "Map",
      "Map",
      "Map",
      "initializeEventListeners",
      "initializeEventListeners",
      "on",
      "async",
      "queueBuild",
      "on",
      "async",
      "deployBuild",
      "on",
      "async",
      "updateAPISpec",
      "registerBuildConfig",
      "set",
      "emit",
      "Date",
      "toISOString",
      "updateBuildConfig",
      "if",
      "Error",
      "Date",
      "toISOString",
      "set",
      "emit",
      "Date",
      "toISOString",
      "queueBuild",
      "if",
      "Error",
      "set",
      "push",
      "emit",
      "Date",
      "toISOString",
      "if",
      "processBuildQueue",
      "processBuildQueue",
      "if",
      "while",
      "executeBuild",
      "catch",
      "error",
      "updateBuildStatus",
      "executeBuild",
      "if",
      "Error",
      "if",
      "Error",
      "updateBuildStatus",
      "simulateBuildProcess",
      "Date",
      "toISOString",
      "set",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "updateBuildStatus",
      "process",
      "simulateBuildProcess",
      "for",
      "addBuildLog",
      "Promise",
      "setTimeout",
      "now",
      "floor",
      "random",
      "floor",
      "random",
      "updateBuildStatus",
      "if",
      "Error",
      "set",
      "emit",
      "Date",
      "toISOString",
      "addBuildLog",
      "if",
      "Error",
      "push",
      "set",
      "emit",
      "Date",
      "toISOString",
      "deployBuild",
      "if",
      "Error",
      "if",
      "Error",
      "if",
      "Error",
      "set",
      "emit",
      "Date",
      "toISOString",
      "executeDeployment",
      "executeDeployment",
      "set",
      "for",
      "push",
      "Date",
      "toISOString",
      "Promise",
      "setTimeout",
      "set",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "push",
      "set",
      "emit",
      "Date",
      "toISOString",
      "registerAPISpec",
      "set",
      "emit",
      "Date",
      "toISOString",
      "updateAPISpec",
      "if",
      "Error",
      "from",
      "values",
      "filter",
      "for",
      "queueBuild",
      "emit",
      "Date",
      "toISOString",
      "getBuildStatus",
      "get",
      "getDeploymentStatus",
      "get",
      "getAllBuildConfigs",
      "from",
      "values",
      "getRecentBuildResults",
      "from",
      "values",
      "sort",
      "Date",
      "getTime",
      "Date",
      "getTime",
      "slice",
      "getRecentDeploymentResults",
      "from",
      "values",
      "sort",
      "Date",
      "getTime",
      "Date",
      "getTime",
      "slice",
      "getAgentStatus"
    ],
    "type": "third-party",
    "lastUpdated": "2025-08-05T22:22:18.662Z",
    "status": "active"
  },
  "AshrakaIntegrationService": {
    "name": "AshrakaIntegrationService",
    "path": "src\\services\\ashrakaIntegrationService.ts",
    "dependencies": [
      "./eventBus"
    ],
    "api": [],
    "methods": [
      "initialize",
      "access",
      "startSyncInterval",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "error",
      "emit",
      "Date",
      "toISOString",
      "getState",
      "if",
      "Error",
      "parse",
      "catch",
      "error",
      "updateState",
      "if",
      "Error",
      "if",
      "Error",
      "Date",
      "toISOString",
      "writeFile",
      "stringify",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "error",
      "addLogEntry",
      "if",
      "Error",
      "Date",
      "toISOString",
      "appendFile",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "error",
      "getRecentLogs",
      "if",
      "Error",
      "map",
      "parse",
      "filter",
      "sort",
      "Date",
      "now",
      "getTime",
      "Date",
      "now",
      "getTime",
      "slice",
      "catch",
      "error",
      "updateContinuance",
      "if",
      "Error",
      "parse",
      "Date",
      "toISOString",
      "push",
      "Date",
      "toISOString",
      "Date",
      "toISOString",
      "writeFile",
      "stringify",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "error",
      "detectDrift",
      "if",
      "if",
      "push",
      "if",
      "push",
      "if",
      "push",
      "if",
      "if",
      "push",
      "applyDriftCorrections",
      "if",
      "if",
      "Date",
      "toISOString",
      "if",
      "updateState",
      "addLogEntry",
      "join",
      "catch",
      "error",
      "startSyncInterval",
      "setInterval",
      "async",
      "if",
      "applyDriftCorrections",
      "updateContinuance",
      "catch",
      "error",
      "stopSyncInterval",
      "if",
      "clearInterval",
      "disconnect",
      "stopSyncInterval",
      "emit",
      "Date",
      "toISOString",
      "getConnectionStatus"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.663Z",
    "status": "active"
  },
  "authService": {
    "name": "authService",
    "path": "src\\services\\authService.ts",
    "dependencies": [
      "./eventBus"
    ],
    "api": [],
    "methods": [
      "loadToken",
      "loadToken",
      "if",
      "if",
      "now",
      "parse",
      "clearAuth",
      "saveToken",
      "now",
      "setItem",
      "setItem",
      "stringify",
      "setItem",
      "toString",
      "clearAuth",
      "removeItem",
      "removeItem",
      "removeItem",
      "login",
      "fetch",
      "stringify",
      "if",
      "Error",
      "json",
      "fetch",
      "if",
      "Error",
      "json",
      "saveToken",
      "publish",
      "catch",
      "publish",
      "register",
      "fetch",
      "stringify",
      "if",
      "Error",
      "json",
      "publish",
      "catch",
      "publish",
      "logout",
      "clearAuth",
      "publish",
      "isAuthenticated",
      "now",
      "getToken",
      "if",
      "isAuthenticated",
      "getUser",
      "if",
      "isAuthenticated",
      "refreshUser",
      "if",
      "isAuthenticated",
      "fetch",
      "if",
      "clearAuth",
      "json",
      "setItem",
      "stringify",
      "catch",
      "clearAuth",
      "authenticatedFetch",
      "if",
      "Error",
      "fetch",
      "AuthService"
    ],
    "type": "external",
    "lastUpdated": "2025-08-05T22:22:18.663Z",
    "status": "active"
  },
  "backupService": {
    "name": "backupService",
    "path": "src\\services\\backupService.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "createLogEntry",
      "Date",
      "toLocaleTimeString",
      "database",
      "storage",
      "backups",
      "runBackupProcess",
      "for",
      "createLogEntry",
      "delay"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.663Z",
    "status": "active"
  },
  "chatService": {
    "name": "chatService",
    "path": "src\\services\\chatService.ts",
    "dependencies": [
      "@google/genai",
      "./personaService"
    ],
    "api": [],
    "methods": [
      "Map",
      "Map",
      "if",
      "error",
      "GoogleGenAI",
      "initializeChat",
      "if",
      "if",
      "error",
      "create",
      "set",
      "getChatHistory",
      "get",
      "sendMessageStream",
      "if",
      "Date",
      "toLocaleTimeString",
      "set",
      "if",
      "initializeChat",
      "if",
      "await",
      "Date",
      "toLocaleTimeString",
      "set",
      "getChatHistory",
      "catch",
      "error",
      "Date",
      "toLocaleTimeString",
      "set",
      "ChatService"
    ],
    "type": "third-party",
    "lastUpdated": "2025-08-05T22:22:18.664Z",
    "status": "active"
  },
  "circuitBreakerManager": {
    "name": "circuitBreakerManager",
    "path": "src\\services\\circuitBreaker.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "startMonitoring",
      "if",
      "if",
      "now",
      "Error",
      "onSuccess",
      "catch",
      "onFailure",
      "onSuccess",
      "if",
      "log",
      "onFailure",
      "now",
      "if",
      "now",
      "log",
      "startMonitoring",
      "setInterval",
      "monitor",
      "monitor",
      "if",
      "log",
      "log",
      "getStatus",
      "forceClose",
      "log",
      "forceOpen",
      "now",
      "log",
      "Map",
      "createBreaker",
      "set",
      "getBreaker",
      "get",
      "getAllBreakers",
      "Map",
      "getStatus",
      "for",
      "getStatus",
      "CircuitBreakerManager",
      "createBreaker",
      "createBreaker",
      "createBreaker",
      "createBreaker",
      "createBreaker",
      "createBreaker",
      "createBreaker",
      "createBreaker",
      "createBreaker",
      "if",
      "operation",
      "execute",
      "catch",
      "error",
      "if",
      "log",
      "fallback",
      "withCircuitBreaker",
      "function",
      "function",
      "executeWithCircuitBreaker",
      "apply"
    ],
    "type": "third-party",
    "lastUpdated": "2025-08-05T22:22:18.664Z",
    "status": "active"
  },
  "codebaseService": {
    "name": "codebaseService",
    "path": "src\\services\\codebaseService.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "Date",
      "toLocaleTimeString",
      "floor",
      "random",
      "Date",
      "toLocaleTimeString",
      "random",
      "random",
      "streamCodebaseActivity",
      "while",
      "delay",
      "random",
      "if",
      "generateCommit",
      "if",
      "generateWebhook",
      "if",
      "generateCommit"
    ],
    "type": "third-party",
    "lastUpdated": "2025-08-05T22:22:18.665Z",
    "status": "active"
  },
  "codexService": {
    "name": "codexService",
    "path": "src\\services\\codexService.ts",
    "dependencies": [
      "./loomService"
    ],
    "api": [],
    "methods": [
      "Set",
      "loadRules",
      "subscribe",
      "map",
      "catch",
      "error",
      "loadRules",
      "notify",
      "forEach",
      "cb",
      "add",
      "callback",
      "return",
      "delete",
      "Date",
      "getTime",
      "addScroll",
      "CodexService"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.665Z",
    "status": "active"
  },
  "concurrentAgentService": {
    "name": "concurrentAgentService",
    "path": "src\\services\\concurrentAgentService.ts",
    "dependencies": [
      "./agentData",
      "./orchestratorService"
    ],
    "api": [],
    "methods": [
      "Map",
      "Map",
      "Set",
      "getInitialAgentData",
      "initializeAgentWorkloads",
      "initializeAgentWorkloads",
      "forEach",
      "set",
      "getPreferredTaskTypes",
      "getPreferredTaskTypes",
      "flatMap",
      "submitTask",
      "set",
      "push",
      "if",
      "sortTaskQueue",
      "processTaskQueue",
      "sortTaskQueue",
      "sort",
      "if",
      "return",
      "getTime",
      "getTime",
      "processTaskQueue",
      "while",
      "if",
      "if",
      "filter",
      "if",
      "unshift",
      "if",
      "unshift",
      "startTask",
      "findBestAgentForTask",
      "from",
      "values",
      "filter",
      "if",
      "map",
      "if",
      "if",
      "sort",
      "startTask",
      "Date",
      "add",
      "push",
      "executeTask",
      "finally",
      "completeTask",
      "executeTask",
      "Date",
      "catch",
      "Date",
      "executeTaskByType",
      "min",
      "Promise",
      "setTimeout",
      "switch",
      "completeTask",
      "delete",
      "if",
      "splice",
      "processTaskQueue",
      "getTaskStatus",
      "get",
      "getAllTasks",
      "from",
      "values",
      "getAgentWorkloads",
      "from",
      "values",
      "getSystemStatus",
      "getAgentWorkloads",
      "cancelTask",
      "if",
      "if",
      "splice",
      "delete",
      "ConcurrentAgentService",
      "async",
      "submitTask",
      "getSystemStatus",
      "getAllTasks"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.666Z",
    "status": "active"
  },
  "consciousnessStateSchema": {
    "name": "consciousnessStateSchema",
    "path": "src\\services\\consciousnessWorkflowService.ts",
    "dependencies": [
      "arktype"
    ],
    "api": [],
    "methods": [
      "type",
      "type",
      "type",
      "Map",
      "initializeSession",
      "initializeSession",
      "Date",
      "set",
      "startTaskBlock",
      "if",
      "initializeSession",
      "now",
      "calculateEnergy",
      "calculateFocus",
      "calculateCreativity",
      "calculateDignity",
      "push",
      "endTaskBlock",
      "if",
      "updateConsciousnessEvolution",
      "getActivitiesForType",
      "switch",
      "slice",
      "slice",
      "slice",
      "slice",
      "slice",
      "calculateEnergy",
      "now",
      "getTime",
      "max",
      "calculateFocus",
      "reduce",
      "min",
      "calculateCreativity",
      "min",
      "calculateDignity",
      "min",
      "updateConsciousnessEvolution",
      "min",
      "checkPrestigeProgression",
      "checkPrestigeProgression",
      "if",
      "meetsPrestigeRequirements",
      "updateTimeAllocation",
      "log",
      "meetsPrestigeRequirements",
      "return",
      "calculateDignity",
      "calculateContributionQuality",
      "calculateEmergenceMastery",
      "calculateContributionQuality",
      "reduce",
      "min",
      "calculateEmergenceMastery",
      "reduce",
      "min",
      "updateTimeAllocation",
      "if",
      "getSessionStatus",
      "getRecommendedNextBlock",
      "if",
      "if",
      "if",
      "if",
      "if",
      "getSessionStats",
      "if",
      "reduce",
      "calculateEnergy",
      "calculateFocus",
      "calculateCreativity",
      "calculateDignity",
      "endSession",
      "if",
      "Date",
      "getTime",
      "getTime",
      "getAllSessions",
      "from",
      "values",
      "evolution",
      "resetEvolution",
      "clear",
      "ConsciousnessWorkflowService",
      "startTaskBlock",
      "endTaskBlock",
      "getSessionStatus",
      "getSessionStats",
      "getRecommendedNextBlock",
      "endSession"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.667Z",
    "status": "active"
  },
  "ContentIngestionService": {
    "name": "ContentIngestionService",
    "path": "src\\services\\contentIngestionService.ts",
    "dependencies": [
      "./eventBus"
    ],
    "api": [],
    "methods": [
      "Map",
      "Map",
      "Map",
      "Map",
      "Map",
      "createContentRequest",
      "set",
      "emit",
      "startContentWorkflow",
      "startContentWorkflow",
      "if",
      "calculateEstimatedCompletion",
      "set",
      "emit",
      "executeWorkflowStep",
      "calculateEstimatedCompletion",
      "toISOString",
      "executeWorkflowStep",
      "if",
      "if",
      "emit",
      "switch",
      "executeMarketResearch",
      "executeOutlineGeneration",
      "executeContentGeneration",
      "executeContentOptimization",
      "executeReviewFinalization",
      "emit",
      "if",
      "setTimeout",
      "executeWorkflowStep",
      "Date",
      "toISOString",
      "emit",
      "executeMarketResearch",
      "estimateMarketSize",
      "analyzeCompetition",
      "identifyOpportunities",
      "analyzeTrends",
      "calculateRevenuePotential",
      "executeOutlineGeneration",
      "set",
      "emit",
      "executeContentGeneration",
      "if",
      "for",
      "set",
      "push",
      "emit",
      "executeContentOptimization",
      "from",
      "values",
      "filter",
      "for",
      "set",
      "push",
      "emit",
      "executeReviewFinalization",
      "calculateOverallQuality",
      "estimateMarketSize",
      "analyzeCompetition",
      "identifyOpportunities",
      "analyzeTrends",
      "calculateRevenuePotential",
      "floor",
      "generateContentOutline",
      "ceil",
      "for",
      "generateChapterTitle",
      "generateChapterDescription",
      "generateKeyPoints",
      "generateChapterKeywords",
      "generateContentIdeas",
      "generateResearchNeeds",
      "push",
      "generateSEOKeywords",
      "generateMarketPositioning",
      "generateCompetitiveAdvantage",
      "calculateRevenuePotential",
      "generateChapterTitle",
      "generateChapterDescription",
      "generateKeyPoints",
      "generateChapterKeywords",
      "Set",
      "slice",
      "generateContentIdeas",
      "generateResearchNeeds",
      "generateSEOKeywords",
      "flatMap",
      "toLowerCase",
      "split",
      "filter",
      "Set",
      "slice",
      "generateMarketPositioning",
      "join",
      "generateCompetitiveAdvantage",
      "generateChapterContent",
      "split",
      "calculateReadabilityScore",
      "calculateSEOScore",
      "calculateQualityScore",
      "generateContentSuggestions",
      "generateContentText",
      "map",
      "join",
      "toLowerCase",
      "trim",
      "calculateReadabilityScore",
      "min",
      "calculateSEOScore",
      "forEach",
      "if",
      "min",
      "min",
      "calculateQualityScore",
      "min",
      "generateContentSuggestions",
      "if",
      "push",
      "if",
      "includes",
      "push",
      "if",
      "push",
      "optimizeContent",
      "identifyImprovements",
      "identifySEOEnhancements",
      "identifyReadabilityImprovements",
      "identifyMarketAlignment",
      "calculateSEOScore",
      "calculateReadabilityScore",
      "calculateRevenuePotential",
      "optimizeContentText",
      "replace",
      "identifyImprovements",
      "identifySEOEnhancements",
      "identifyReadabilityImprovements",
      "identifyMarketAlignment",
      "calculateOverallQuality",
      "from",
      "values",
      "filter",
      "if",
      "round",
      "getRequest",
      "get",
      "getOutline",
      "get",
      "getGeneration",
      "get",
      "getOptimization",
      "get",
      "getWorkflow",
      "get",
      "getAllRequests",
      "from",
      "values",
      "getAllOutlines",
      "from",
      "values",
      "getAllGenerations",
      "from",
      "values",
      "getAllOptimizations",
      "from",
      "values",
      "getAllWorkflows",
      "from",
      "values"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.669Z",
    "status": "active"
  },
  "controlPanelService": {
    "name": "controlPanelService",
    "path": "src\\services\\controlPanelService.ts",
    "dependencies": [
      "./orchestratorService",
      "./agentData"
    ],
    "api": [],
    "methods": [
      "Set",
      "initializeState",
      "initializeState",
      "reduce",
      "keys",
      "reduce",
      "forEach",
      "cb",
      "add",
      "return",
      "delete",
      "if",
      "notify",
      "notify",
      "if",
      "notify",
      "ControlPanelService"
    ],
    "type": "third-party",
    "lastUpdated": "2025-08-05T22:22:18.669Z",
    "status": "active"
  },
  "councilService": {
    "name": "councilService",
    "path": "src\\services\\councilService.ts",
    "dependencies": [
      "./geminiClient",
      "./codexService"
    ],
    "api": [],
    "methods": [
      "async",
      "filter",
      "map",
      "join",
      "if",
      "runDeliberation",
      "for",
      "push",
      "if",
      "includes",
      "addRule",
      "Date",
      "toLocaleDateString"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.670Z",
    "status": "active"
  },
  "curatorService": {
    "name": "curatorService",
    "path": "src\\services\\curatorService.ts",
    "dependencies": [
      "./taskQueueService"
    ],
    "api": [],
    "methods": [
      "Date",
      "toLocaleDateString",
      "Date",
      "toLocaleDateString",
      "Date",
      "toLocaleDateString",
      "Set",
      "startSimulation",
      "forEach",
      "cb",
      "startSimulation",
      "if",
      "clearInterval",
      "setInterval",
      "if",
      "random",
      "if",
      "Date",
      "toLocaleString",
      "Date",
      "now",
      "toLocaleDateString",
      "if",
      "random",
      "push",
      "addTask",
      "notify",
      "add",
      "callback",
      "return",
      "delete",
      "charAt",
      "toUpperCase",
      "slice",
      "push",
      "notify",
      "catch",
      "error",
      "filter",
      "notify",
      "if",
      "resolveTaskBySourceId",
      "notify",
      "CuratorService"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.670Z",
    "status": "active"
  },
  "dashboardService": {
    "name": "dashboardService",
    "path": "src\\services\\dashboardService.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "Set",
      "loadLayout",
      "loadLayout",
      "if",
      "if",
      "isArray",
      "catch",
      "error",
      "saveLayout",
      "setItem",
      "stringify",
      "catch",
      "error",
      "notify",
      "forEach",
      "cb",
      "subscribe",
      "add",
      "callback",
      "return",
      "delete",
      "DashboardService"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.670Z",
    "status": "active"
  },
  "diagnosticTests": {
    "name": "diagnosticTests",
    "path": "src\\services\\diagnosticsService.ts",
    "dependencies": [
      "./agentData",
      "./orchestratorService"
    ],
    "api": [],
    "methods": [
      "createLogEntry",
      "Date",
      "toLocaleTimeString",
      "runDiagnostic",
      "switch",
      "if",
      "createLogEntry",
      "if",
      "createLogEntry",
      "createLogEntry",
      "delay",
      "createLogEntry",
      "delay",
      "if",
      "createLogEntry",
      "createLogEntry",
      "delay",
      "createLogEntry",
      "delay",
      "createLogEntry",
      "delay",
      "createLogEntry",
      "createLogEntry",
      "delay",
      "createLogEntry",
      "delay",
      "createLogEntry",
      "if",
      "createLogEntry",
      "delay",
      "createLogEntry",
      "delay",
      "createLogEntry",
      "createLogEntry",
      "createLogEntry",
      "createLogEntry",
      "delay",
      "if",
      "createLogEntry",
      "createLogEntry",
      "delay",
      "for",
      "createLogEntry",
      "delay",
      "if",
      "createLogEntry",
      "createLogEntry",
      "createLogEntry",
      "createLogEntry",
      "createLogEntry"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.671Z",
    "status": "active"
  },
  "erduService": {
    "name": "erduService",
    "path": "src\\services\\erduService.ts",
    "dependencies": [
      "./geminiClient"
    ],
    "api": [],
    "methods": [
      "streamErduEvents",
      "while",
      "Promise",
      "setTimeout",
      "random",
      "min",
      "max",
      "Date",
      "toLocaleTimeString",
      "severity",
      "async",
      "if",
      "startsWith",
      "Error",
      "trim",
      "runIncidentResponse",
      "map",
      "for",
      "delay",
      "delay",
      "random",
      "Report",
      "catch"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.671Z",
    "status": "active"
  },
  "eventBus": {
    "name": "eventBus",
    "path": "src\\services\\eventBus.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "if",
      "forEach",
      "callback",
      "catch",
      "error",
      "String",
      "delete",
      "if",
      "Set",
      "add",
      "return",
      "delete",
      "EventBus"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.672Z",
    "status": "active"
  },
  "fileSystemService": {
    "name": "fileSystemService",
    "path": "src\\services\\fileSystemService.ts",
    "dependencies": [
      "../data/fileSystemData"
    ],
    "api": [],
    "methods": [
      "getTree",
      "getFileContent",
      "for",
      "if",
      "if",
      "saveFileContent",
      "for",
      "if",
      "find",
      "if",
      "FileSystemService"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.672Z",
    "status": "active"
  },
  "generateText": {
    "name": "generateText",
    "path": "src\\services\\geminiClient.ts",
    "dependencies": [
      "@google/genai",
      "../types"
    ],
    "api": [],
    "methods": [
      "if",
      "GoogleGenAI",
      "warn",
      "dequeueAndRun",
      "if",
      "shift",
      "resolve",
      "fn",
      "catch",
      "reject",
      "setTimeout",
      "Promise",
      "push",
      "dequeueAndRun",
      "async",
      "async",
      "if",
      "generateContent",
      "if",
      "if",
      "catch",
      "error",
      "enqueueRequest",
      "async",
      "async",
      "if",
      "generateImages",
      "if",
      "catch",
      "error",
      "enqueueRequest",
      "Generation",
      "async",
      "if",
      "Error",
      "Promise",
      "if",
      "resolve",
      "split",
      "reject",
      "Error",
      "readAsDataURL",
      "async",
      "if",
      "Error",
      "imageUrlToBase64",
      "author",
      "information",
      "information",
      "generateContent",
      "parse"
    ],
    "type": "external",
    "lastUpdated": "2025-08-05T22:22:18.672Z",
    "status": "active"
  },
  "getTerminalResponse": {
    "name": "getTerminalResponse",
    "path": "src\\services\\geminiService.ts",
    "dependencies": [
      "./geminiClient"
    ],
    "api": [],
    "methods": [
      "async",
      "generateText",
      "async",
      "generateImageFromPrompt"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.673Z",
    "status": "active"
  },
  "GoogleAIStudioService": {
    "name": "GoogleAIStudioService",
    "path": "src\\services\\googleAIStudioService.ts",
    "dependencies": [
      "./eventBus"
    ],
    "api": [],
    "methods": [
      "Map",
      "Map",
      "Map",
      "Map",
      "initializeModels",
      "initializeModels",
      "forEach",
      "set",
      "setAPIKey",
      "emit",
      "Date",
      "toISOString",
      "testConnection",
      "if",
      "Error",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "error",
      "emit",
      "Date",
      "toISOString",
      "getAvailableModels",
      "from",
      "values",
      "getModel",
      "get",
      "generateText",
      "if",
      "Error",
      "if",
      "Error",
      "map",
      "fetch",
      "stringify",
      "if",
      "Error",
      "now",
      "random",
      "toString",
      "substr",
      "map",
      "Date",
      "toISOString",
      "set",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "emit",
      "Date",
      "toISOString",
      "generateImage",
      "if",
      "Error",
      "fetch",
      "stringify",
      "if",
      "Error",
      "map",
      "now",
      "random",
      "toString",
      "substr",
      "Date",
      "toISOString",
      "set",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "emit",
      "Date",
      "toISOString",
      "generateCode",
      "if",
      "Error",
      "if",
      "if",
      "map",
      "join",
      "if",
      "if",
      "if",
      "generateText",
      "now",
      "random",
      "toString",
      "substr",
      "Date",
      "toISOString",
      "set",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "emit",
      "Date",
      "toISOString",
      "getGenerationHistory",
      "from",
      "values",
      "sort",
      "Date",
      "now",
      "getTime",
      "Date",
      "now",
      "getTime",
      "slice",
      "getImageGenerationHistory",
      "from",
      "values",
      "sort",
      "Date",
      "now",
      "getTime",
      "Date",
      "now",
      "getTime",
      "slice",
      "getCodeGenerationHistory",
      "from",
      "values",
      "sort",
      "Date",
      "now",
      "getTime",
      "Date",
      "now",
      "getTime",
      "slice",
      "getStatus"
    ],
    "type": "external",
    "lastUpdated": "2025-08-05T22:22:18.673Z",
    "status": "active"
  },
  "GoogleVertexAIService": {
    "name": "GoogleVertexAIService",
    "path": "src\\services\\googleVertexAIService.ts",
    "dependencies": [
      "./eventBus"
    ],
    "api": [],
    "methods": [
      "Map",
      "Map",
      "Map",
      "Map",
      "Map",
      "Map",
      "initializeModels",
      "initializeModels",
      "forEach",
      "set",
      "setCredentials",
      "emit",
      "Date",
      "toISOString",
      "testConnection",
      "if",
      "Error",
      "fetch",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "error",
      "emit",
      "Date",
      "toISOString",
      "getAvailableModels",
      "from",
      "values",
      "getCustomModels",
      "from",
      "values",
      "createCustomModel",
      "if",
      "Error",
      "set",
      "emit",
      "Date",
      "toISOString",
      "startTraining",
      "if",
      "Error",
      "set",
      "emit",
      "Date",
      "toISOString",
      "simulateTraining",
      "simulateTraining",
      "if",
      "set",
      "for",
      "Promise",
      "setTimeout",
      "max",
      "min",
      "max",
      "min",
      "push",
      "toFixed",
      "toFixed",
      "set",
      "emit",
      "Date",
      "toISOString",
      "Date",
      "toISOString",
      "Date",
      "getTime",
      "Date",
      "getTime",
      "set",
      "if",
      "map",
      "set",
      "emit",
      "Date",
      "toISOString",
      "generateText",
      "if",
      "Error",
      "if",
      "Error",
      "fetch",
      "stringify",
      "if",
      "Error",
      "now",
      "random",
      "toString",
      "substr",
      "map",
      "Date",
      "toISOString",
      "set",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "emit",
      "Date",
      "toISOString",
      "createABTest",
      "set",
      "set",
      "emit",
      "Date",
      "toISOString",
      "generateTextWithABTest",
      "if",
      "Error",
      "for",
      "if",
      "generateText",
      "now",
      "random",
      "toString",
      "substr",
      "random",
      "random",
      "Date",
      "toISOString",
      "get",
      "push",
      "emit",
      "Date",
      "toISOString",
      "analyzeABTest",
      "if",
      "Error",
      "forEach",
      "set",
      "filter",
      "for",
      "if",
      "set",
      "metric",
      "for",
      "if",
      "confidence",
      "if",
      "if",
      "push",
      "satisfaction",
      "toFixed",
      "push",
      "if",
      "push",
      "fromEntries",
      "if",
      "set",
      "emit",
      "Date",
      "toISOString",
      "getTrainingJob",
      "get",
      "getAllTrainingJobs",
      "from",
      "values",
      "sort",
      "Date",
      "getTime",
      "Date",
      "getTime",
      "getABTest",
      "get",
      "getAllABTests",
      "from",
      "values",
      "sort",
      "Date",
      "getTime",
      "Date",
      "getTime",
      "getABTestResults",
      "get",
      "getGenerationHistory",
      "from",
      "values",
      "sort",
      "Date",
      "now",
      "getTime",
      "Date",
      "now",
      "getTime",
      "slice",
      "getStatus"
    ],
    "type": "external",
    "lastUpdated": "2025-08-05T22:22:18.674Z",
    "status": "active"
  },
  "getAgentHierarchy": {
    "name": "getAgentHierarchy",
    "path": "src\\services\\hierarchyService.ts",
    "dependencies": [
      "./agentData",
      "../types/types",
      "../components/icons"
    ],
    "api": [],
    "methods": [
      "replace",
      "replace",
      "toUpperCase",
      "entries",
      "forEach",
      "forEach",
      "add",
      "values",
      "forEach",
      "forEach",
      "add",
      "forEach",
      "set",
      "createNode",
      "entries",
      "forEach",
      "if",
      "forEach",
      "if",
      "push",
      "entries",
      "forEach",
      "if",
      "forEach",
      "if",
      "has",
      "set",
      "createNode",
      "push",
      "nodes",
      "forEach",
      "if",
      "has",
      "push",
      "buildHierarchy"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.675Z",
    "status": "active"
  },
  "simulateInfrastructureUpdates": {
    "name": "simulateInfrastructureUpdates",
    "path": "src\\services\\infrastructureService.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "changes",
      "map",
      "if",
      "random",
      "setTimeout",
      "if",
      "map",
      "if",
      "if",
      "random",
      "parse",
      "stringify"
    ],
    "type": "third-party",
    "lastUpdated": "2025-08-05T22:22:18.675Z",
    "status": "active"
  },
  "ingestionService": {
    "name": "ingestionService",
    "path": "src\\services\\ingestionService.ts",
    "dependencies": [
      "./geminiClient"
    ],
    "api": [],
    "methods": [
      "book",
      "entities",
      "level",
      "async",
      "if",
      "startsWith",
      "Error",
      "trim",
      "runIngestionPipeline",
      "map",
      "for",
      "delay",
      "delay",
      "random",
      "catch"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.676Z",
    "status": "active"
  },
  "knowledgeGraphService": {
    "name": "knowledgeGraphService",
    "path": "src\\services\\knowledgeGraphService.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "database",
      "analyze",
      "getForensicTimeline",
      "delay",
      "random",
      "filter",
      "toLowerCase",
      "includes",
      "toLowerCase",
      "toLowerCase",
      "includes",
      "toLowerCase",
      "map",
      "getCodeLineage",
      "delay",
      "random",
      "keys",
      "find",
      "includes",
      "toLowerCase",
      "includes",
      "if",
      "KnowledgeGraphService"
    ],
    "type": "third-party",
    "lastUpdated": "2025-08-05T22:22:18.676Z",
    "status": "active"
  },
  "loomService": {
    "name": "loomService",
    "path": "src\\services\\loomService.ts",
    "dependencies": [
      "../../schemas/playbookSchema",
      "../../schemas/codexSchema"
    ],
    "api": [],
    "methods": [
      "Information",
      "Set",
      "initializeData",
      "initializeData",
      "forEach",
      "push",
      "stringify",
      "forEach",
      "push",
      "stringify",
      "forEach",
      "cb",
      "add",
      "return",
      "delete",
      "filter",
      "find",
      "if",
      "if",
      "playbookSchema",
      "if",
      "error",
      "if",
      "codexRuleSchema",
      "if",
      "error",
      "catch",
      "error",
      "notify",
      "if",
      "stringify",
      "Date",
      "toISOString",
      "split",
      "stringify",
      "push",
      "notify",
      "stringify",
      "push",
      "notify",
      "filter",
      "if",
      "notify",
      "LoomService"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.677Z",
    "status": "active"
  },
  "n8nIntegrationService": {
    "name": "n8nIntegrationService",
    "path": "src\\services\\n8nIntegrationService.ts",
    "dependencies": [
      "./eventBus"
    ],
    "api": [],
    "methods": [
      "Map",
      "Map",
      "initializeWorkflows",
      "createImageValidationWorkflow",
      "createShopifyAutomationWorkflow",
      "createSocialMediaGenerationWorkflow",
      "createInventoryMonitoringWorkflow",
      "createCustomerSupportWorkflow",
      "for",
      "set",
      "log",
      "Workflow",
      "createImageValidationWorkflow",
      "POD",
      "Workflow",
      "createShopifyAutomationWorkflow",
      "Workflow",
      "createSocialMediaGenerationWorkflow",
      "Date",
      "now",
      "toISOString",
      "Workflow",
      "createInventoryMonitoringWorkflow",
      "level",
      "potential",
      "level",
      "action",
      "createCustomerSupportWorkflow",
      "executeWorkflow",
      "if",
      "Error",
      "set",
      "simulateWorkflowExecution",
      "Date",
      "getTime",
      "getTime",
      "publish",
      "catch",
      "Date",
      "getTime",
      "getTime",
      "publish",
      "delete",
      "push",
      "simulateWorkflowExecution",
      "for",
      "simulateNodeProcessing",
      "Date",
      "getTime",
      "getTime",
      "catch",
      "Date",
      "getTime",
      "getTime",
      "push",
      "simulateNodeProcessing",
      "Promise",
      "setTimeout",
      "random",
      "switch",
      "if",
      "random",
      "Error",
      "if",
      "random",
      "Error",
      "getWorkflow",
      "get",
      "getAllWorkflows",
      "from",
      "values",
      "getActiveRuns",
      "from",
      "values",
      "getWorkflowHistory",
      "if",
      "filter",
      "getWorkflowStats",
      "if",
      "Error",
      "updateWorkflow",
      "if",
      "Error",
      "assign",
      "deleteWorkflow",
      "delete",
      "clearWorkflowHistory",
      "N8nIntegrationService"
    ],
    "type": "third-party",
    "lastUpdated": "2025-08-05T22:22:18.679Z",
    "status": "active"
  },
  "n8nService": {
    "name": "n8nService",
    "path": "src\\services\\n8nService.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "Set",
      "forEach",
      "cb",
      "add",
      "callback",
      "return",
      "delete",
      "setWorkflowStatus",
      "if",
      "notify",
      "addRunHistory",
      "if",
      "push",
      "notify",
      "runWorkflow",
      "runWorkflowWithInput",
      "runWorkflowWithInput",
      "if",
      "setWorkflowStatus",
      "Date",
      "toLocaleString",
      "addRunHistory",
      "setTimeout",
      "random",
      "setWorkflowStatus",
      "notify",
      "random",
      "N8nService"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.680Z",
    "status": "active"
  },
  "observatoryService": {
    "name": "observatoryService",
    "path": "src\\services\\observatoryService.ts",
    "dependencies": [
      "./agentData",
      "./orchestratorService"
    ],
    "api": [],
    "methods": [
      "Date",
      "toLocaleTimeString",
      "Date",
      "toLocaleTimeString",
      "streamObservabilityData",
      "while",
      "delay",
      "random",
      "if",
      "generateLLMCall",
      "if",
      "Task",
      "generateAgentTask",
      "if",
      "generateAgentTask"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.680Z",
    "status": "active"
  },
  "ocrService": {
    "name": "ocrService",
    "path": "src\\services\\ocrService.ts",
    "dependencies": [
      "./eventBus"
    ],
    "api": [],
    "methods": [
      "Map",
      "autoAdjustForBook",
      "catch",
      "error",
      "Error",
      "processOCR",
      "catch",
      "error",
      "Error",
      "enrichBookData",
      "calculateInvestmentPotential",
      "generatePricingRecommendations",
      "calculateCollectorInterest",
      "analyzeMarketTrend",
      "catch",
      "error",
      "Error",
      "performCompleteScan",
      "set",
      "Date",
      "now",
      "push",
      "delete",
      "publish",
      "catch",
      "delete",
      "methods",
      "detectBookBoundaries",
      "calculateOptimalZoom",
      "min",
      "max",
      "sqrt",
      "analyzePaperReflectivity",
      "measureKeystoneDistortion",
      "applyPreprocessing",
      "runABBYYOCR",
      "engine",
      "extractStructuredData",
      "assessOCRQuality",
      "analyzeMarketValue",
      "assessRarity",
      "analyzeCondition",
      "calculateInvestmentPotential",
      "calculateCollectorInterest",
      "analyzeMarketTrend",
      "generatePricingRecommendations",
      "performScan",
      "getActiveScans",
      "Map",
      "getScanHistory",
      "getScanById",
      "find",
      "clearScanHistory",
      "OCRService"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.681Z",
    "status": "active"
  },
  "OpenAICodexService": {
    "name": "OpenAICodexService",
    "path": "src\\services\\openAICodexService.ts",
    "dependencies": [
      "./eventBus"
    ],
    "api": [],
    "methods": [
      "Map",
      "Map",
      "Map",
      "Map",
      "Map",
      "initializeModels",
      "initializeModels",
      "forEach",
      "set",
      "setAPIKey",
      "emit",
      "Date",
      "toISOString",
      "testConnection",
      "if",
      "Error",
      "fetch",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "error",
      "emit",
      "Date",
      "toISOString",
      "getAvailableModels",
      "from",
      "values",
      "getModel",
      "get",
      "generateCompletion",
      "if",
      "Error",
      "if",
      "Error",
      "if",
      "push",
      "if",
      "push",
      "if",
      "push",
      "push",
      "fetch",
      "stringify",
      "if",
      "Error",
      "now",
      "random",
      "toString",
      "substr",
      "Date",
      "toISOString",
      "set",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "emit",
      "Date",
      "toISOString",
      "editCode",
      "if",
      "Error",
      "if",
      "generateCompletion",
      "analysis",
      "now",
      "random",
      "toString",
      "substr",
      "Date",
      "toISOString",
      "set",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "emit",
      "Date",
      "toISOString",
      "analyzeCode",
      "if",
      "Error",
      "if",
      "if",
      "if",
      "generateCompletion",
      "now",
      "random",
      "toString",
      "substr",
      "Date",
      "toISOString",
      "set",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "emit",
      "Date",
      "toISOString",
      "generateFunction",
      "if",
      "Error",
      "if",
      "if",
      "if",
      "map",
      "join",
      "if",
      "if",
      "if",
      "if",
      "generateCompletion",
      "now",
      "random",
      "toString",
      "substr",
      "Date",
      "toISOString",
      "set",
      "emit",
      "Date",
      "toISOString",
      "catch",
      "emit",
      "Date",
      "toISOString",
      "changes",
      "analyzeCodeChanges",
      "if",
      "push",
      "for",
      "if",
      "push",
      "if",
      "push",
      "if",
      "push",
      "parseAnalysisResponse",
      "forEach",
      "if",
      "toLowerCase",
      "includes",
      "toLowerCase",
      "includes",
      "push",
      "toLowerCase",
      "includes",
      "toLowerCase",
      "includes",
      "if",
      "toLowerCase",
      "includes",
      "toLowerCase",
      "includes",
      "push",
      "if",
      "includes",
      "push",
      "parseFunctionResponse",
      "getCompletionHistory",
      "from",
      "values",
      "sort",
      "Date",
      "now",
      "getTime",
      "Date",
      "now",
      "getTime",
      "slice",
      "getEditHistory",
      "from",
      "values",
      "sort",
      "Date",
      "now",
      "getTime",
      "Date",
      "now",
      "getTime",
      "slice",
      "getAnalysisHistory",
      "from",
      "values",
      "sort",
      "Date",
      "now",
      "getTime",
      "Date",
      "now",
      "getTime",
      "slice",
      "getFunctionHistory",
      "from",
      "values",
      "sort",
      "Date",
      "now",
      "getTime",
      "Date",
      "now",
      "getTime",
      "slice",
      "getStatus"
    ],
    "type": "external",
    "lastUpdated": "2025-08-05T22:22:18.683Z",
    "status": "active"
  },
  "operationService": {
    "name": "operationService",
    "path": "src\\services\\operationService.ts",
    "dependencies": [
      "./geminiClient",
      "./playbookService",
      "./personaService"
    ],
    "api": [],
    "methods": [
      "Set",
      "if",
      "forEach",
      "cb",
      "add",
      "if",
      "callback",
      "return",
      "delete",
      "async",
      "if",
      "warn",
      "if",
      "error",
      "notify",
      "map",
      "notify",
      "for",
      "notify",
      "if",
      "Error",
      "notify",
      "catch",
      "if",
      "notify",
      "if",
      "notify",
      "OperationService"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.683Z",
    "status": "active"
  },
  "orchestratorConfig": {
    "name": "orchestratorConfig",
    "path": "src\\services\\orchestratorService.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "refactor"
    ],
    "type": "third-party",
    "lastUpdated": "2025-08-05T22:22:18.684Z",
    "status": "active"
  },
  "personaSecurityService": {
    "name": "personaSecurityService",
    "path": "src\\services\\personaSecurityService.ts",
    "dependencies": [
      "../components/personaIcons"
    ],
    "api": [],
    "methods": [
      "Map",
      "Map",
      "initializeSecurityProfiles",
      "initializeSecurityProfiles",
      "forEach",
      "set",
      "Date",
      "getPermissionsForLevel",
      "Date",
      "calculateSecurityLevel",
      "for",
      "entries",
      "if",
      "calculateDriftScore",
      "calculateActivityScore",
      "calculateStandingScore",
      "calculateXPScore",
      "getPermissionsForLevel",
      "getSecurityProfile",
      "get",
      "validateSecurityHandshake",
      "if",
      "entries",
      "forEach",
      "if",
      "match",
      "push",
      "if",
      "detectSuspiciousPattern",
      "push",
      "Date",
      "Date",
      "round",
      "generateRecommendations",
      "storeValidationResult",
      "detectSuspiciousPattern",
      "if",
      "every",
      "if",
      "if",
      "generateRecommendations",
      "if",
      "push",
      "if",
      "push",
      "if",
      "push",
      "if",
      "push",
      "if",
      "push",
      "storeValidationResult",
      "if",
      "has",
      "set",
      "push",
      "if",
      "shift",
      "getValidationHistory",
      "get",
      "hasPermission",
      "if",
      "includes",
      "includes",
      "updatePersonaActivity",
      "if",
      "Date",
      "calculateSecurityLevel",
      "getPermissionsForLevel",
      "getSecurityReport",
      "forEach",
      "from",
      "values",
      "flat",
      "filter",
      "from",
      "values",
      "flat",
      "map",
      "filter",
      "round",
      "reduce",
      "generateSecurityAudit",
      "entries",
      "map",
      "join",
      "PersonaSecurityService"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.684Z",
    "status": "active"
  },
  "getPersonaProfiles": {
    "name": "getPersonaProfiles",
    "path": "src\\services\\personaService.ts",
    "dependencies": [
      "../types/types",
      "./agentData"
    ],
    "api": [],
    "methods": [
      "getPersonaProfiles",
      "if",
      "parse",
      "stringify",
      "getPersonaProfile",
      "find"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.685Z",
    "status": "active"
  },
  "playbookService": {
    "name": "playbookService",
    "path": "src\\services\\playbookService.ts",
    "dependencies": [
      "./loomService"
    ],
    "api": [],
    "methods": [
      "Set",
      "loadPlaybooks",
      "subscribe",
      "map",
      "parse",
      "catch",
      "error",
      "loadPlaybooks",
      "notify",
      "forEach",
      "cb",
      "add",
      "callback",
      "return",
      "delete",
      "PlaybookService"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.685Z",
    "status": "active"
  },
  "RPGDatabaseService": {
    "name": "RPGDatabaseService",
    "path": "src\\services\\rpgDatabaseService.ts",
    "dependencies": [
      "./eventBus"
    ],
    "api": [],
    "methods": [
      "Map",
      "Map",
      "Map",
      "Map",
      "initializeService",
      "initializeService",
      "log",
      "loadExistingDocuments",
      "rebuildIndexes",
      "processPDFDocument",
      "log",
      "extractPDFContent",
      "now",
      "random",
      "toString",
      "substr",
      "extractLoreFromText",
      "extractKeywordsFromText",
      "determineDocumentType",
      "Date",
      "Date",
      "set",
      "updateIndexes",
      "emit",
      "catch",
      "error",
      "extractPDFContent",
      "extractTextFromPDF",
      "extractImagesFromPDF",
      "extractMetadataFromPDF",
      "extractTextFromPDF",
      "extractImagesFromPDF",
      "extractMetadataFromPDF",
      "determineDocumentType",
      "toLowerCase",
      "toLowerCase",
      "if",
      "includes",
      "includes",
      "if",
      "includes",
      "includes",
      "if",
      "includes",
      "includes",
      "extractLoreFromText",
      "extractKeywordsFromText",
      "toLowerCase",
      "forEach",
      "if",
      "includes",
      "push",
      "searchImages",
      "for",
      "for",
      "toLowerCase",
      "if",
      "toLowerCase",
      "includes",
      "push",
      "forEach",
      "if",
      "toLowerCase",
      "includes",
      "push",
      "if",
      "if",
      "includes",
      "if",
      "push",
      "sort",
      "searchLore",
      "for",
      "for",
      "if",
      "if",
      "toLowerCase",
      "if",
      "toLowerCase",
      "includes",
      "toLowerCase",
      "includes",
      "some",
      "toLowerCase",
      "includes",
      "push",
      "generateCharacterSheet",
      "getCharacterSheetTemplate",
      "applyThemeToTemplate",
      "getCharacterSheetTemplate",
      "applyThemeToTemplate",
      "updateIndexes",
      "set",
      "set",
      "set",
      "loadExistingDocuments",
      "log",
      "rebuildIndexes",
      "log",
      "getDocument",
      "get",
      "getAllDocuments",
      "from",
      "values",
      "getDocumentsBySystem",
      "from",
      "values",
      "filter",
      "getDocumentsByType",
      "from",
      "values",
      "filter",
      "RPGDatabaseService"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.686Z",
    "status": "active"
  },
  "searchService": {
    "name": "searchService",
    "path": "src\\services\\searchService.ts",
    "dependencies": [
      "./loomService",
      "./personaService"
    ],
    "api": [],
    "methods": [
      "escapeRegExp",
      "replace",
      "buildIndex",
      "buildIndex",
      "forEach",
      "parse",
      "map",
      "join",
      "push",
      "catch",
      "error",
      "forEach",
      "parse",
      "push",
      "catch",
      "error",
      "forEach",
      "if",
      "push",
      "search",
      "trim",
      "if",
      "forEach",
      "toLowerCase",
      "includes",
      "toLowerCase",
      "toLowerCase",
      "indexOf",
      "toLowerCase",
      "if",
      "max",
      "min",
      "if",
      "substring",
      "if",
      "if",
      "substring",
      "replace",
      "RegExp",
      "escapeRegExp",
      "push",
      "SearchService"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.686Z",
    "status": "active"
  },
  "SEOOptimizationService": {
    "name": "SEOOptimizationService",
    "path": "src\\services\\seoOptimizationService.ts",
    "dependencies": [
      "./eventBus"
    ],
    "api": [],
    "methods": [
      "Map",
      "Map",
      "Map",
      "Map",
      "initializeKeywordDatabase",
      "initializeKeywordDatabase",
      "forEach",
      "set",
      "toLowerCase",
      "generateSearchVolume",
      "generateDifficulty",
      "generateCompetition",
      "generateRelatedKeywords",
      "generateSearchVolume",
      "floor",
      "generateDifficulty",
      "difficulty",
      "min",
      "generateCompetition",
      "level",
      "floor",
      "random",
      "generateRelatedKeywords",
      "entries",
      "forEach",
      "if",
      "toLowerCase",
      "includes",
      "push",
      "Set",
      "slice",
      "analyzeBookSEO",
      "extractKeywords",
      "generateSuggestedKeywords",
      "analyzeKeywordOpportunities",
      "calculateSEOScore",
      "generateRecommendations",
      "now",
      "getKeywordDifficulties",
      "getSearchVolumes",
      "getCompetitionLevels",
      "set",
      "emit",
      "extractKeywords",
      "toLowerCase",
      "replace",
      "split",
      "filter",
      "forEach",
      "set",
      "get",
      "from",
      "entries",
      "sort",
      "slice",
      "map",
      "generateSuggestedKeywords",
      "extractKeywords",
      "getCategoryKeywords",
      "flatMap",
      "get",
      "Set",
      "slice",
      "getCategoryKeywords",
      "analyzeKeywordOpportunities",
      "map",
      "get",
      "toLowerCase",
      "if",
      "floor",
      "generateImplementation",
      "filter",
      "generateImplementation",
      "floor",
      "random",
      "calculateSEOScore",
      "min",
      "min",
      "generateRecommendations",
      "sort",
      "slice",
      "forEach",
      "push",
      "toFixed",
      "getKeywordDifficulties",
      "forEach",
      "get",
      "toLowerCase",
      "getSearchVolumes",
      "forEach",
      "get",
      "toLowerCase",
      "getCompetitionLevels",
      "forEach",
      "get",
      "toLowerCase",
      "optimizeContent",
      "optimizeTitle",
      "optimizeDescription",
      "calculateKeywordDensity",
      "calculateReadabilityScore",
      "calculateContentSEOScore",
      "generateContentSuggestions",
      "now",
      "set",
      "emit",
      "optimizeTitle",
      "toLowerCase",
      "split",
      "filter",
      "some",
      "includes",
      "if",
      "optimizeDescription",
      "replace",
      "calculateKeywordDensity",
      "toLowerCase",
      "split",
      "forEach",
      "if",
      "set",
      "get",
      "forEach",
      "calculateReadabilityScore",
      "score",
      "split",
      "split",
      "max",
      "min",
      "calculateContentSEOScore",
      "if",
      "if",
      "keys",
      "some",
      "toLowerCase",
      "includes",
      "if",
      "if",
      "keys",
      "some",
      "toLowerCase",
      "includes",
      "values",
      "some",
      "if",
      "if",
      "includes",
      "min",
      "generateContentSuggestions",
      "if",
      "push",
      "if",
      "push",
      "entries",
      "forEach",
      "if",
      "push",
      "if",
      "push",
      "analyzeMarket",
      "now",
      "getTopKeywordsForCategory",
      "analyzeCompetitors",
      "identifyMarketGaps",
      "analyzeTrendingTopics",
      "analyzeSeasonalPatterns",
      "set",
      "emit",
      "getTopKeywordsForCategory",
      "getCategoryKeywords",
      "slice",
      "analyzeCompetitors",
      "identifyMarketGaps",
      "analyzeTrendingTopics",
      "analyzeSeasonalPatterns",
      "analyzeCompetitorKeywords",
      "getCompetitorSites",
      "for",
      "scrapeKeywordsFromSite",
      "push",
      "analyzeBookPlatforms",
      "push",
      "catch",
      "warn",
      "Set",
      "getCompetitorSites",
      "scrapeKeywordsFromSite",
      "fetch",
      "stringify",
      "now",
      "json",
      "if",
      "extractKeywordsFromHTML",
      "catch",
      "warn",
      "analyzeBookPlatforms",
      "for",
      "encodeURIComponent",
      "scrapeKeywordsFromSite",
      "push",
      "catch",
      "warn",
      "extractKeywordsFromHTML",
      "replace",
      "replace",
      "trim",
      "extractKeywords",
      "calculateOptimalKeywordDensity",
      "split",
      "match",
      "RegExp",
      "ranges",
      "toLowerCase",
      "if",
      "if",
      "generateKeywordOptimizationSuggestions",
      "entries",
      "forEach",
      "calculateOptimalKeywordDensity",
      "if",
      "push",
      "toFixed",
      "if",
      "push",
      "toFixed",
      "push",
      "toFixed",
      "getAnalysis",
      "get",
      "getOptimization",
      "get",
      "getMarketAnalysis",
      "get",
      "getAllAnalyses",
      "from",
      "values",
      "getAllOptimizations",
      "from",
      "values",
      "getAllMarketAnalyses",
      "from",
      "values"
    ],
    "type": "external",
    "lastUpdated": "2025-08-05T22:22:18.688Z",
    "status": "active"
  },
  "symposiumConfig": {
    "name": "symposiumConfig",
    "path": "src\\services\\symposiumService.ts",
    "dependencies": [
      "./geminiClient"
    ],
    "api": [],
    "methods": [
      "map",
      "join",
      "map",
      "join",
      "async",
      "fetch",
      "stringify",
      "text",
      "fetch",
      "stringify",
      "if",
      "startsWith",
      "return",
      "trim",
      "runSymposium",
      "getAiResponse",
      "generateAgentPrompt",
      "for",
      "if",
      "now",
      "random",
      "push",
      "if",
      "find",
      "find",
      "if"
    ],
    "type": "external",
    "lastUpdated": "2025-08-05T22:22:18.689Z",
    "status": "active"
  },
  "taskQueueService": {
    "name": "taskQueueService",
    "path": "src\\services\\taskQueueService.ts",
    "dependencies": [
      "./eventBus"
    ],
    "api": [],
    "methods": [
      "Set",
      "fetchTasks",
      "forEach",
      "cb",
      "add",
      "callback",
      "return",
      "delete",
      "async",
      "if",
      "Error",
      "await",
      "sort",
      "Date",
      "now",
      "getTime",
      "Date",
      "now",
      "getTime",
      "notify",
      "catch",
      "error",
      "async",
      "if",
      "some",
      "log",
      "fetch",
      "stringify",
      "if",
      "if",
      "log",
      "Error",
      "await",
      "publish",
      "fetchTasks",
      "catch",
      "error",
      "async",
      "fetch",
      "if",
      "Error",
      "publish",
      "fetchTasks",
      "catch",
      "error",
      "find",
      "if",
      "resolveTask",
      "TaskQueueService"
    ],
    "type": "external",
    "lastUpdated": "2025-08-05T22:22:18.689Z",
    "status": "active"
  },
  "technomancerService": {
    "name": "technomancerService",
    "path": "src\\services\\technomancerService.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "FastAPI",
      "Set",
      "startSimulation",
      "forEach",
      "cb",
      "startSimulation",
      "if",
      "clearInterval",
      "setInterval",
      "if",
      "random",
      "floor",
      "random",
      "random",
      "incrementVersion",
      "if",
      "unshift",
      "now",
      "Date",
      "toLocaleString",
      "random",
      "notify",
      "incrementVersion",
      "split",
      "parseInt",
      "toString",
      "join",
      "add",
      "callback",
      "return",
      "delete",
      "TechnomancerService"
    ],
    "type": "third-party",
    "lastUpdated": "2025-08-05T22:22:18.690Z",
    "status": "active"
  },
  "trafficStrategyService": {
    "name": "trafficStrategyService",
    "path": "src\\services\\trafficStrategyService.ts",
    "dependencies": [
      "./eventBus"
    ],
    "api": [],
    "methods": [
      "Map",
      "Map",
      "initializePlatformStrategies",
      "initializeCustomerJourneys",
      "initializeContentStrategies",
      "initializeSEOStrategies",
      "initializePlatformStrategies",
      "charts",
      "set",
      "set",
      "initializeCustomerJourneys",
      "initializeContentStrategies",
      "initializeSEOStrategies",
      "getPlatformStrategy",
      "get",
      "getAllPlatformStrategies",
      "from",
      "values",
      "getCustomerJourney",
      "if",
      "filter",
      "getContentStrategies",
      "if",
      "filter",
      "getSEOStrategies",
      "generateContentIdeas",
      "find",
      "if",
      "switch",
      "trackJourneyProgress",
      "if",
      "updateJourneyMetrics",
      "publish",
      "updateJourneyMetrics",
      "if",
      "if",
      "if",
      "generateComplianceReport",
      "if",
      "Error",
      "floor",
      "random",
      "getTrafficAnalytics",
      "if",
      "get",
      "fromEntries",
      "updateTrafficAnalytics",
      "set",
      "generateStrategyRecommendations",
      "TrafficStrategyService"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.691Z",
    "status": "active"
  },
  "xpService": {
    "name": "xpService",
    "path": "src\\services\\xpService.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "Map",
      "Map",
      "initializeDefaultProfiles",
      "initializeDefaultProfiles",
      "forEach",
      "if",
      "has",
      "createProfile",
      "createProfile",
      "initializeAchievements",
      "getDefaultVoiceStyle",
      "getDefaultCommunicationPattern",
      "getDefaultBackstoryElements",
      "Date",
      "set",
      "getDefaultVoiceStyle",
      "getDefaultCommunicationPattern",
      "getDefaultBackstoryElements",
      "initializeAchievements",
      "map",
      "awardXP",
      "get",
      "if",
      "Error",
      "checkAntiWeaponizationSafeguards",
      "if",
      "calculateConsciousnessMultiplier",
      "floor",
      "calculateProgress",
      "getCurrentLevel",
      "checkAchievements",
      "updateConsciousnessState",
      "Date",
      "updateDailyXPLimit",
      "checkAntiWeaponizationSafeguards",
      "get",
      "Date",
      "toDateString",
      "if",
      "if",
      "calculateConsciousnessMultiplier",
      "getCurrentLevel",
      "for",
      "if",
      "calculateProgress",
      "for",
      "if",
      "find",
      "if",
      "find",
      "if",
      "checkAchievements",
      "get",
      "if",
      "if",
      "find",
      "if",
      "Date",
      "push",
      "if",
      "find",
      "if",
      "Date",
      "push",
      "if",
      "find",
      "if",
      "Date",
      "push",
      "updateConsciousnessState",
      "min",
      "min",
      "min",
      "min",
      "updateDailyXPLimit",
      "get",
      "Date",
      "toDateString",
      "if",
      "set",
      "getProfile",
      "get",
      "getAllProfiles",
      "from",
      "values",
      "updateCustomization",
      "get",
      "if",
      "find",
      "if",
      "if",
      "if",
      "if",
      "if",
      "if",
      "if",
      "getUnlockableFeatures",
      "get",
      "if",
      "find",
      "getSystemStats",
      "from",
      "values",
      "reduce",
      "reduce",
      "reduce",
      "filter",
      "reduce",
      "resetDailyLimits",
      "for",
      "entries",
      "if",
      "Date",
      "toDateString",
      "delete",
      "XPService",
      "getProfile",
      "getAllProfiles",
      "updateCustomization",
      "getSystemStats",
      "awardXP"
    ],
    "type": "third-party",
    "lastUpdated": "2025-08-05T22:22:18.693Z",
    "status": "active"
  },
  "types": {
    "name": "types",
    "path": "src\\types\\types.ts",
    "dependencies": [
      "react"
    ],
    "api": [],
    "methods": [],
    "type": "third-party",
    "lastUpdated": "2025-08-05T22:22:18.695Z",
    "status": "active"
  },
  "xpProgressSchema": {
    "name": "xpProgressSchema",
    "path": "src\\types\\xpTypes.ts",
    "dependencies": [
      "arktype"
    ],
    "api": [],
    "methods": [
      "type",
      "type",
      "type",
      "type",
      "Definitions",
      "Achievements",
      "Styles",
      "logic",
      "lines",
      "masking",
      "translator",
      "cycles",
      "mapping",
      "Patterns"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.696Z",
    "status": "active"
  },
  "validateEnvironment": {
    "name": "validateEnvironment",
    "path": "src\\utils\\env-validation.ts",
    "dependencies": [],
    "api": [],
    "methods": [
      "startsWith",
      "startsWith",
      "startsWith",
      "includes",
      "validateEnvironment",
      "for",
      "if",
      "push",
      "if",
      "validator",
      "push",
      "if",
      "push",
      "logEnvironmentStatus",
      "validateEnvironment",
      "if",
      "log",
      "if",
      "warn",
      "forEach",
      "warn",
      "error",
      "forEach",
      "error",
      "if",
      "warn",
      "forEach",
      "warn",
      "useEnvironmentValidation",
      "useEffect",
      "setValidation",
      "validateEnvironment"
    ],
    "type": "internal",
    "lastUpdated": "2025-08-05T22:22:18.697Z",
    "status": "active"
  }
}